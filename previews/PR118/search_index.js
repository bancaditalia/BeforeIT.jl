var documenterSearchIndex = {"docs":
[{"location":"examples/scenario_analysis_via_shock.html#Scenario-analysis-via-custom-shocks","page":"Shocked simulations","title":"Scenario analysis via custom shocks","text":"","category":"section"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"In this tutorial we will illustrate how to perform a scenario analysis by running the model multiple times under a specific shock and comparing the results with the unshocked model.","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"import BeforeIT as Bit\nimport StatsBase: mean, std\nusing Plots\n\nparameters = Bit.AUSTRIA2010Q1.parameters;\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions;\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Initialise the model","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"model = Bit.Model(parameters, initial_conditions);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Simulate the baseline model for T quarters, N_reps times, and collect the data","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"T = 16\nn_sims = 64\nmodel_vec_baseline = Bit.ensemblerun!((deepcopy(model) for _ in 1:n_sims), T);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Now, apply a shock to the model and simulate it again. A shock is simply a function that takes the model and changes some of its parameters for a specific time period. We do this by first defining a \"struct\" with useful attributes. For example, we can define an productivity and a consumption shock with the following structs","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"struct ProductivityShock\n    productivity_multiplier::Float64    # productivity multiplier\nend\n\nstruct ConsumptionShock\n    consumption_multiplier::Float64    # productivity multiplier\n    final_time::Int\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"and then by making the structs callable functions that change the parameters of the model, this is done in Julia using the syntax below","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"A permanent change in the labour productivities by the factor s.productivity_multiplier","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"function (s::ProductivityShock)(model::Bit.Model)\n    return model.firms.alpha_bar_i .= model.firms.alpha_bar_i .* s.productivity_multiplier\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"A temporary change in the propensity to consume model.prop.psi by the factor s.consumption_multiplier","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"function (s::ConsumptionShock)(model::Bit.Model)\n    return if model.agg.t == 1\n        model.prop.psi = model.prop.psi * s.consumption_multiplier\n    elseif model.agg.t == s.final_time\n        model.prop.psi = model.prop.psi / s.consumption_multiplier\n    end\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Define specific shocks, for example a 2% increase in productivity","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"productivity_shock = ProductivityShock(1.02)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"or a 4 quarters long 2% increase in consumption","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"consumption_shock = ConsumptionShock(1.02, 4)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Simulate the model with the shock","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"model_vec_shocked = Bit.ensemblerun!((deepcopy(model) for _ in 1:n_sims), T; shock! = consumption_shock);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"extract the data vectors from the model vectors","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"data_vector_baseline = Bit.DataVector(model_vec_baseline);\ndata_vector_shocked = Bit.DataVector(model_vec_shocked);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Compute mean and standard error of GDP for the baseline and shocked simulations","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"mean_gdp_baseline = mean(data_vector_baseline.real_gdp, dims = 2)\nmean_gdp_shocked = mean(data_vector_shocked.real_gdp, dims = 2)\nsem_gdp_baseline = std(data_vector_baseline.real_gdp, dims = 2) / sqrt(n_sims)\nsem_gdp_shocked = std(data_vector_shocked.real_gdp, dims = 2) / sqrt(n_sims)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Compute the ratio of shocked to baseline GDP","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"gdp_ratio = mean_gdp_shocked ./ mean_gdp_baseline","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"the standard error on a ratio of two variables is computed with the error propagation formula","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"sem_gdp_ratio = gdp_ratio .* ((sem_gdp_baseline ./ mean_gdp_baseline) .^ 2 .+ (sem_gdp_shocked ./ mean_gdp_shocked) .^ 2) .^ 0.5","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Finally, we can plot the impulse response curve","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"plot(\n    1:(T + 1),\n    gdp_ratio,\n    ribbon = sem_gdp_ratio,\n    fillalpha = 0.2,\n    label = \"\",\n    xlabel = \"quarters\",\n    ylabel = \"GDP change\",\n)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"We can save the figure using: savefig(\"gdp_shock.png\")","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#Code-reference","page":"API","title":"Code reference","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"In this page we document the functions which constitute the bulk of BeforeIT.jl functionality.","category":"page"},{"location":"api.html#Agent-types","page":"API","title":"Agent types","text":"","category":"section"},{"location":"api.html#BeforeIT.@object-Tuple{Any}","page":"API","title":"BeforeIT.@object","text":"Bit.@object struct YourObjectType{X}(ObjectTypeToInherit) [<: OptionalSupertype]\n    extra_property::X\n    other_extra_property_with_default::Bool = true\n    const other_extra_const_property::Int\n    # etc...\nend\n\nDefine an object struct which includes all fields that YourObjectType has, as well as any additional ones the user may provide. The macro supports all syntaxes that the standard Julia struct command allows for, such as const field declaration or default values for some fields. Additionally, the resulting type will always have a keyword constructor defined for it (using @kwdef).\n\nUsing Bit.@object is the recommended way to create types for BeforeIT.jl.\n\nStructs created with Bit.@object by default subtype Bit.AbstractObject. If you want YourObjectType to subtype something other than Bit.AbstractObject, use the optional argument OptionalSupertype.\n\nUsage\n\nThe macro Bit.@object has two primary uses:\n\nTo include the mandatory fields for a particular object in your object struct. In this case you would use one of the minimal object types.\nA convenient way to include fields from another, already existing struct, thereby establishing a toolkit for \"type inheritance\" in Julia.\n\nThe existing minimal object types are:\n\nBit.Workers\nBit.Firms\nBit.Bank\nBit.CentralBank\nBit.Government\nBit.RestOfTheWorld\nBit.Aggregates\nBit.Data\n\nwhich describe which fields they will contribute to the new type.\n\nExample\n\n# you can either constrain the type (to Float64 in this case) at definition time\nBit.@object mutable struct CentralBankNew(CentralBank) <: Bit.AbstractCentralBank\n    new_field::Float64\nend\n# or keep it generic so that you can change it at construction time\nBit.@object mutable struct CentralBankNew2{T}(CentralBank) <: Bit.AbstractCentralBank\n    new_field::T\nend\n\nConsult the CANVAS Extension page in the documentation for a more advanced example on how to use the macro.\n\n\n\n\n\n","category":"macro"},{"location":"api.html#BeforeIT.Aggregates","page":"API","title":"BeforeIT.Aggregates","text":"This is a Aggregates type. It is used to store the aggregate variables of the economy. Note that t is an integer, while the rest are floats or vectors of floats.\n\nFields\n\nY [vector]: GDP data + predictions\npi_ [vector]: inflation data + predictions\nP_bar: Global price index\nP_bar_g [vector]: Producer price index for principal good g\nP_bar_HH: Consumer price index\nP_bar_CF: Capital price index\nP_bar_h: CPI_h\nP_bar_CF_h: Capital price index _h\nY_e: Expected GDP\ngamma_e: Expected growth\npi_e: Expected inflation\nt: Time index\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Bank","page":"API","title":"BeforeIT.Bank","text":"This is a Bank type. It represents the bank of the model.\n\nFields\n\nE_k: equity capital (common equity) of the bank\nPi_k: Profits of the bank\nPi_e_k: Expected profits of the bank\nD_k: Residual and balancing item on the bank’s balance sheet\nr: Rate for loans and morgages\n\nHousehold fields (bank' owner)\n\nY_h: Net disposable income of bank owner (investor)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\nK_h: Capital stock\nD_h: Deposits\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.CentralBank","page":"API","title":"BeforeIT.CentralBank","text":"This is a CentralBank type. It represents the central bank of the model.\n\nFields\n\nr_bar: Nominal interest rate\nr_G: Interest rate on government bonds\nrho: Parameter for gradual adjustment of the policy rate\nr_star: Real equilibrium interest rate\npi_star: Inflation target by CB\nxi_pi: Weight the CB puts on inflation targeting\nxi_gamma: Weight placed on economic\nE_CB: Central bank equity\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Firms","page":"API","title":"BeforeIT.Firms","text":"This is a Firms type. Each field is an array which stores the values for all the firms in the economy. Note that the G_i, N_i and V_i fields are integers, while the rest are floats.\n\nFor all fields the entry at index i corresponds to the ith firm.\n\nFields\n\nG_i: Principal product\nalpha_bar_i: Average productivity of labor\nbeta_i: Productivity of intermediate consumption\nkappa_i: Productivity of capital\nw_i: Wages\nw_bar_i: Average wage rate\ndelta_i: Depreciation rate for capital\ntau_Y_i: Net tax rate on products\ntau_K_i: Net tax rate on production\nN_i: Number of persons employed\nY_i: Production of goods\nQ_i: Sales of goods\nQ_d_i: Demand for goods\nP_i: Price\nS_i: Inventories\nK_i: Capital, in real terms\nM_i: Intermediate goods/services and raw materials, in real terms\nL_i: Outstanding loans\npi_bar_i: Operating margin\nD_i: Deposits of the firm\nPi_i: Profits\nV_i: Vacancies\nI_i: Investments\nE_i: Equity\nP_bar_i: Price index\nP_CF_i: Price index\nDS_i: Differnece in stock of final goods\nDM_i: Difference in stock of intermediate goods\nDL_i: Obtained loans\nDL_d_i: Target loans\nK_e_i: Expected capital \nL_e_i: Expected loans\nQ_s_i: Expected sales\nI_d_i: Desired investments\nDM_d_i: Desired materials\nN_d_i: Desired employment\nPi_e_i: Expected profits\n\nHousehold fields (firms' owners)\n\nY_h: Net disposable income of firm owner (investor)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\nK_h: Capital stock\nD_h: Deposits of the owner of the firms\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Government","page":"API","title":"BeforeIT.Government","text":"This is a Government type. It represents the government of the model.\n\nFields\n\nalpha_G: Autoregressive coefficient for government consumption\nbeta_G: Scalar constant for government consumption\nsigma_G: Variance coefficient for government consumption\nY_G: Government revenues\nC_G: Consumption demand of the general government\nL_G: Loans taken out by the government\nsb_inact: Social benefits for inactive persons\nsb_other: Social benefits for all\nC_d_j [vector]: Local governments consumption demand\nC_j: Realised government consumption\nP_j: Price inflation of government goods <- ??\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Model","page":"API","title":"BeforeIT.Model","text":"This is a Model type. It is used to store all the agents of the economy.\n\nFields\n\nw_act: Workers that are active\nw_inact: Workers that are inactive\nfirms: Firms\nbank: Bank\ncb: CentralBank\ngov: Government\nrotw: RestOfTheWorld\nagg: Aggregates\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.RestOfTheWorld","page":"API","title":"BeforeIT.RestOfTheWorld","text":"This is a RestOfTheWorld type. It represents the rest of the world of the model.\n\nFields\n\nalpha_E: Autoregressive coefficient for exports\nbeta_E: Scalar constant for exports\nsigma_E: Variance coefficient for exports\nalpha_I: Autoregressive coefficient for imports\nbeta_I: Scalar constant for imports\nsigma_I: Variance coefficient for imports\nY_EA: GDP euro area\ngamma_EA: Growth euro area\npi_EA: Inflation euro area\nalpha_pi_EA: Autoregressive coefficient for euro area inflation\nbeta_pi_EA: Autoregressive coefficient for euro area inflation Scalar constant for euro area inflation\nsigma_pi_EA: Variance coefficient for euro area inflation\nalpha_Y_EA: Autoregressive coefficient for euro area GDP\nbeta_Y_EA: Autoregressive coefficient for euro area GDP Scalar constant for euro area GDP\nsigma_Y_EA: Variance coefficient for euro area GDP\nD_RoW: Net creditor/debtor position of the national economy to the rest of the world\nY_I: Supply of imports (in real terms)\nC_E: Total demand for exports\nC_d_l [vector]: Demand for exports of specific product\nC_l: Realised consumption by foreign consumers\nY_m [vector]: Supply of imports per sector\nQ_m [vector]: Sales for imports per sector\nQ_d_m [vector]: Demand for goods\nP_m [vector]: Price of imports per sector\nP_l: Price inflation of exports <- ??\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Workers","page":"API","title":"BeforeIT.Workers","text":"This is a Workers. Each field is an array which stores the values for all the workers in the economy. Note that the O_h field is an integer, while the rest are floats.\n\nFor all fields the entry at index i corresponds to the ith worker.\n\nFields\n\nY_h: Net disposable income of worker owner (investor)\nD_h: Deposits\nK_h: Capital stock\nw_h: Wages (0 if inactive or unemployed)\nO_h: Occupation (0 if unemployed, -1 if inactive)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\n\n\n\n\n\n","category":"type"},{"location":"api.html#Initialisation-function","page":"API","title":"Initialisation function","text":"","category":"section"},{"location":"api.html#BeforeIT.Model-Tuple{Dict{String, Any}, Dict{String, Any}}","page":"API","title":"BeforeIT.Model","text":"Model(parameters, initial_conditions)\n\nInitializes the model with given parameters and initial conditions.\n\nParameters:\n\nparameters: A dictionary containing the model parameters.\ninitial_conditions: A dictionary containing the initial conditions.\n\nReturns:\n\nmodel::AbstractModel: The initialized model.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.update_variables_with_totals!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.update_variables_with_totals!","text":"update_variables_with_totals!(model::AbstractModel)\n\nUpdate the variables in the given model with some global quantities obtained from all agents. This is the last step in the initialization process and it must be performed after all agents have been initialized.\n\nArguments\n\nmodel::AbstractModel: The model object to update.\n\nReturns\n\nNothing\n\n\n\n\n\n","category":"method"},{"location":"api.html#Functions-to-run-an-entire-simulation","page":"API","title":"Functions to run an entire simulation","text":"","category":"section"},{"location":"api.html#BeforeIT.ensemblerun!","page":"API","title":"BeforeIT.ensemblerun!","text":"ensemblerun!(models, T=1; shock! = NoShock(), parallel = true)\n\nA function that runs the models simulations for T steps on each of them.\n\nArguments\n\nmodels: The models to simulate. The models can either be in a Vector or Generator.\nT: the number of steps to perform.\n\nReturns\n\nmodels: The updated models.\n\nExample\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\nmodels = (Bit.Model(parameters, initial_conditions) for _ in 1:10)\nBit.ensemblerun!(models, 2)\n\n\n\n\n\n","category":"function"},{"location":"api.html#BeforeIT.ensemblerun-Tuple{BeforeIT.AbstractModel, Int64, Int64}","page":"API","title":"BeforeIT.ensemblerun","text":"ensemblerun(model, T, n_sims; shock! = NoShock(), parallel = true)\n\nA function that creates n_sims copies of a model and runs simulations for T steps on each of them.\n\nArguments\n\nmodel::AbstractModel: The base model to be copied.\nT: The number of steps to perform on each model.\nn_sims: The number of model copies to create and simulate.\n\nKeyword Arguments\n\nshock: The shock to apply during simulation (default: NoShock()).\nparallel: Whether to run simulations in parallel (default: true).\n\nReturns\n\nmodels: A vector containing the n_sims updated models after simulation.\n\nExample\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\nmodel = Bit.Model(parameters, initial_conditions)\nmodels = Bit.ensemblerun(model, 2, 10)  # Create 10 copies and run for 2 steps\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.run!","page":"API","title":"BeforeIT.run!","text":"run!(model, T; shock! = NoShock(), parallel = false)\n\nRun a single simulation based on the provided model.  The simulation runs for a number of steps T.\n\nArguments\n\nmodel::AbstractModel: The model configuration used for the simulation.\nT: the number of steps to perform.\n\nReturns\n\nmodel::AbstractModel: The model updated during the simulation.\n\nDetails\n\nThe function iteratively updates the model and data for each step using Bit.step!(model).\n\nExample\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\nmodel = Bit.Model(parameters, initial_conditions)\nBit.run!(model, 2)\n\n\n\n\n\n","category":"function"},{"location":"api.html#Firms-actions","page":"API","title":"Firms actions","text":"","category":"section"},{"location":"api.html#BeforeIT.Firms-Tuple{Any, Any}","page":"API","title":"BeforeIT.Firms","text":"Firms(parameters, initial_conditions)\n\nInitialize firms with given parameters and initial conditions.\n\nArguments\n\nparameters: The parameters for initializing the firms.\ninitial_conditions: The initial conditions for the firms.\n\nReturns\n\nfirms::Firms: The initialized firms.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_deposits-Tuple{Any}","page":"API","title":"BeforeIT.firms_deposits","text":"firms_deposits(model)\n\nCalculate the new deposits of firms.\n\nReturns\n\nDD_i: Vector of new deposits\n\nThe new deposits DD_i are calculated as follows:\n\nDD_i = sales + labour_cost + material_cost + taxes_products + taxes_production + corporate_tax + dividend_payments + interest_payments + interest_received + investment_cost + new_credit + debt_installment\n\nwhere:\n\nsales = P_i * Q_i\nlabour_cost = (1 + tau_SIF) * w_i * N_i * P_bar_HH\nmaterial_cost = -DM_i * P_bar_i\ntaxes_products = -tau_Y_i * P_i * Y_i\ntaxes_production = -tau_K_i * P_i * Y_i\ncorporate_tax = -tau_FIRM * pos(Pi_i)\ndividend_payments = -theta_DIV * (1 - tau_FIRM) * pos(Pi_i)\ninterest_payments = -r * (L_i + pos(-D_i))\ninterest_received = r_bar * pos(D_i)\ninvestment_cost = -P_CF_i * I_i\nnew_credit = DL_i\ndebt_installment = -theta * L_i\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_equity-Tuple{Any}","page":"API","title":"BeforeIT.firms_equity","text":"firms_equity(model)\n\nCalculate the equity of firms.\n\nReturns\n\nE_i: Vector of equity\n\nThe equity E_i is calculated as follows:\n\nE_i = D_i + M_i * sum(a_sg G_i * barP_g) + P_i * S_i + barP_CF * K_i - L_i\n\nwhere:\n\nD_i: Deposits\nM_i: Intermediate goods\na_sg: Technology coefficient of the gth product in the sth industry\nG_i: Vector of goods\nP_bar_g: Producer price index for principal good g\nP_i: Price\nS_i: Stock\nP_bar_CF: Capital price index\nK_i: Capital stock\nL_i: Loans\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_expectations_and_decisions-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.firms_expectations_and_decisions","text":"firms_expectations_and_decisions(model)\n\nCalculate the expectations and decisions of firms. That is: compute firm quantity, price, investment and intermediate-goods,  employment decisions, expected profits, and desired/expected loans and capital.\n\nReturns\n\nQ_s_i: Vector of desired quantities\nI_d_i: Vector of desired investments\nDM_d_i: Vector of desired intermediate goods\nN_d_i: Vector of desired employment\nPi_e_i: Vector of expected profits\nDL_d_i: Vector of desired new loans\nK_e_i: Vector of expected capital\nL_e_i: Vector of expected loans\nP_i: Vector of  prices\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_loans-Tuple{Any}","page":"API","title":"BeforeIT.firms_loans","text":"firms_loans(model)\n\nCalculate the new loans of firms.\n\nReturns\n\nL_i: Vector of new loans\n\nThe new loans L_i are calculated as follows:\n\nL_i = (1 - theta) * L_i + DL_i\n\nwhere:\n\ntheta: Rate of repayment\nL_i: Loans\nDL_i: Acquired new loans\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_production-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.firms_production","text":"firms_production(model)\n\nCalculate the production of firms.\n\nReturns\n\nY_i: Vector of production\n\nThe production Y_i is computed using a Leontief technology.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_profits-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.firms_profits","text":"firms_profits(model)\n\nCalculate the profits of firms.\n\nReturns\n\nPi_i: Vector of profits\n\nThe profits Pi_i are calculated as follows:\n\nPi_i = in_sales + in_deposits - out_wages - out_expenses - out_depreciation - out_taxes_prods - out_taxes_capital - out_loans\n\nwhere:\n\nin_sales = P_i * Q_i + P_i * DS_i\nin_deposits = r_bar * pos(D_i)\nout_wages = (1 + tau_SIF) * w_i * N_i * P_bar_HH\nout_expenses = 1 / beta_i * P_bar_i * Y_i\nout_depreciation = delta_i / kappa_i * P_CF_i * Y_i\nout_taxes_prods = tau_Y_i * P_i * Y_i\nout_taxes_capital = tau_K_i * P_i * Y_i\nout_loans = r * (L_i + pos(-D_i))\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_stocks-Tuple{Any}","page":"API","title":"BeforeIT.firms_stocks","text":"firms_stocks(model)\n\nCalculate the stocks of firms.\n\nReturns\n\nK_i: Vector of capital stock\nM_i: Vector of intermediate goods\nDS_i: Vector of differneces in stock of final goods\nS_i: Vector of stock of final goods\n\nThe stocks are calculated as follows:\n\nK_i = K_i - delta_i / kappa_i * Y_i + I_i\nM_i = M_i - Y_i / beta_i + DM_i\nDS_i = Y_i - Q_i\nS_i = S_i + DS_i\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_wages-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.firms_wages","text":"firms_wages(model)\n\nCalculate the wages set by firms.\n\nReturns\n\nw_i: Vector of wages\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.leontief_production-NTuple{7, Any}","page":"API","title":"BeforeIT.leontief_production","text":"leontief_production(Q_s_i, N_i, alpha_i, K_i, kappa_i, M_i, beta_i)\n\nCalculate the production function of firms.\n\nArguments\n\nQ_s_i: Vector of desired quantities\nN_i: Vector of employment\nalpha_i: Vector of labour productivity\nK_i: Vector of capital stock\nkappa_i: Vector of capital productivity\nM_i: Vector of intermediate goods\nbeta_i: Vector of intermediate goods productivity\n\nReturns\n\nY_i: Vector of production\n\nThe Leontief production function Y_i is calculated as follows:\n\nY_i = min(Q_s_i min(N_i cdot alpha_i min(K_i cdot kappa_i M_i cdot beta_i)))\n\n\n\n\n\n","category":"method"},{"location":"api.html#Households-actions","page":"API","title":"Households actions","text":"","category":"section"},{"location":"api.html#Government-actions","page":"API","title":"Government actions","text":"","category":"section"},{"location":"api.html#BeforeIT.Government-Tuple{Any, Any}","page":"API","title":"BeforeIT.Government","text":"Government(parameters, initial_conditions)\n\nInitialize the government agent.\n\nArguments\n\nparameters: The parameters.\ninitial_conditions: The initial conditions.\n\nReturns\n\nThe initialized government model.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_expenditure-Tuple{Any}","page":"API","title":"BeforeIT.gov_expenditure","text":"gov_expenditure(model)\n\nComputes government expenditure on consumption and transfers to households.\n\nReturns\n\nC_G: government consumption\nC_d_j: local government consumptions\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_loans-Tuple{Any}","page":"API","title":"BeforeIT.gov_loans","text":"gov_loans(model)\n\nComputes government new government debt.\n\nReturns\n\nL_G: new government debt\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_revenues-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.gov_revenues","text":"gov_revenues(model)\n\nComputes government revenues from taxes and social security contributions. The government collects taxes on labour income, capital income, value added, and corporate income. It also collects social security contributions from workers and firms. The government also collects taxes on consumption and capital formation. Finally, the government collects taxes on exports and imports.\n\nReturns\n\nY_G: government revenues\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_social_benefits-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.gov_social_benefits","text":"gov_social_benefits(model)\n\nComputes social benefits paid by the government households.\n\nReturns\n\nsb_other: social benefits for other households\nsb_inact: social benefits for inactive households\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bank-and-Central-Bank-actions","page":"API","title":"Bank and Central Bank actions","text":"","category":"section"},{"location":"api.html#BeforeIT.bank_deposits-Tuple{Any}","page":"API","title":"BeforeIT.bank_deposits","text":"bank_deposits(model)\n\nCalculate the new deposits of a bank.\n\nReturns\n\nD_k: New deposits of the bank\n\nThe new deposits D_k are calculated as the sum of the deposits of the active workers, the inactive workers, the firms, and the bank owner itself, plus the bank's equity, minus the loans of the firms.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_equity-Tuple{Any}","page":"API","title":"BeforeIT.bank_equity","text":"bank_equity(model)\n\nCalculate the net profits of the bank.\n\nReturns\n\nE_k: The updated equity of the bank.\n\nThe net profits DE_k are calculated as:\n\nDE_k = Pi_k - theta_DIV cdot (1 - tau_FIRM) cdot max(0 Pi_k) - tau_FIRM cdot max(0 Pi_k)\n\nand the equity E_k is updated as:\n\nE_k = E_k + DE_k\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_expected_profits-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.bank_expected_profits","text":"bank_expected_profits(model)\n\nCalculate the expected profits of a bank.\n\nReturns\n\nE_Pi_k: Expected profits of the bank\n\nThe expected profits E_Pi_k are calculated as follows:\n\nE_Pi_k = Pi_k cdot (1 + pi_e) cdot (1 + gamma_e)\n\nwhere\n\nPi_k: Past profits of the bank\npi_e: Expected inflation rate\ngamma_e: Expected growth rate\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_profits-Tuple{Any}","page":"API","title":"BeforeIT.bank_profits","text":"bank_profits(model)\n\nCalculate the total profits of the bank.\n\nReturns\n\nPi_k: The total profits of the bank.\n\nThe total profits Pi_k are calculated as:\n\nPi_k = r cdot sum_i(L_i + max(0 -D_i)) + r cdot sum_h(max(0 -D_h)) + r_bar\ncdot max(0 D_k) - r_bar cdot sum_i(max(0 D_i)) - r_bar cdot\nsum_h(max(0 D_h)) - r_bar cdot max(0 -D_k)\n\nwhere\n\nL_i: Array of loans provided by the bank\nD_i: Array of deposits from firms\nD_h: Array of deposits from households\nD_k: Residual and balancing item on the bank’s balance sheet\nr_bar: Base interest rate\nr: Interest rate set by the bank\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_rate-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.bank_rate","text":"bank_rate(model)\n\nUpdate the interest rate set by the bank.\n\nReturns\n\nr: The updated interest rate\n\nr = barr + mu\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.central_bank_equity-Tuple{Any}","page":"API","title":"BeforeIT.central_bank_equity","text":"central_bank_equity(model)\n\nCalculate the equity of the central bank.\n\nReturns\n\nE_CB: The equity of the central bank\n\nThe equity E_CB is calculated as follows:\n\nE_CB = E_CB + Pi_CB\n\nwhere \\Pi_{CB} are the profits of the central bank.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.central_bank_profits-Tuple{Any, Any}","page":"API","title":"BeforeIT.central_bank_profits","text":"central_bank_profits(cb, model)\n\nFunction to calculate the profits of a central bank.\n\nReturns\n\nPi_CB: Profits of the central bank\n\nThe profits Pi_CB are calculated as follows:\n\nPi_CB = r_G cdot L_G - r_bar cdot D_k\n\nwhere\n\nr_bar: The base interest rate\nD_k: Deposits from commercial banks\nL_G: Loans provided to the government\nr_G: Interest rate on government loans\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.central_bank_rate-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.central_bank_rate","text":"central_bank_rate(cb, model)\n\nUpdate the base interest rate set by the central bank according to the Taylor rule.\n\nArguments\n\ncb: The central bank whose base interest rate is to be updated\nmodel: The model object\n\nReturns\n\nr_bar: The updated base interest rate\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.finance_insolvent_firms!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.finance_insolvent_firms!","text":"finance_insolvent_firms!(model)\n\nRe-finance insolvent firms using bank equity.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.taylor_rule-Union{Tuple{T}, NTuple{8, T}} where T","page":"API","title":"BeforeIT.taylor_rule","text":"taylor_rule(rho, r_bar, r_star, pi_star, xi_pi, xi_gamma, gamma_EA, pi_EA)\n\nCalculate the interest rate according to the Taylor rule.\n\nArguments\n\nrho: Parameter for gradual adjustment of the policy rate.\nr_bar: Nominal interest rate.\nr_star: Real equilibrium interest rate.\npi_star: The target inflation rate.\nxi_pi: Weight the CB puts on inflation targeting.\nxi_gamma: Weight placed on economic growth.\ngamma_EA: The output growth rate.\npi_EA: The inflation rate.\n\nReturns\n\nrate: The calculated interest rate.\n\nThe Taylor rule is given by the following equation:\n\nr_t = ρ * r_t-1 + (1 - ρ) * (r^* + π^* + ξ_π * (π_t - π^*) + ξ_γ * γ_t)\n\n\n\n\n\n","category":"method"},{"location":"api.html#Rest-Of-The-World-actions","page":"API","title":"Rest Of The World actions","text":"","category":"section"},{"location":"api.html#BeforeIT.rotw_deposits-Tuple{Any}","page":"API","title":"BeforeIT.rotw_deposits","text":"rotw_deposits(model)\n\nCalculate the deposits of the rest of the world.\n\nReturns\n\nD_RoW: The deposits of the rest of the world.\n\nThe deposits D_RoW are calculated as follows:\n\nD_RoW = D_RoW + left( sum_m P_m cdot Q_m right) - (1 + tau_EXPORT) cdot C_l\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.rotw_import_export-Tuple{Any}","page":"API","title":"BeforeIT.rotw_import_export","text":"rotw_import_export(model)\n\nCalculate the demand for exports and supply of imports of the rest of the world.\n\nReturns\n\nC_E: Total demand for exports.\nY_I: Supply of imports (in real terms).\nC_d_l: TDemand for exports of specific product.\nY_m: Supply of imports per sector.\nP_m: Price of imports per sector.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Markets","page":"API","title":"Markets","text":"","category":"section"},{"location":"api.html#BeforeIT.search_and_matching_credit!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.search_and_matching_credit!","text":"search_and_matching_credit!(firms::Firms, model)\n\nThis function calculates the credit allocation for each firm in the given firms object.\n\nParameters:\n\nfirms::Firms: The firms object.\nmodel: The model object.\n\nReturns:\n\nDL_i: An array of credit allocations for each firm.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.search_and_matching_labour!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.search_and_matching_labour!","text":"search_and_matching_labour!(firms::Firms, model)\n\nThis function implements a labor search and matching algorithm. It takes in a Firms object and a Model object as  input. The Firms object contains information about the number of desired employees (N_d_i) and the current number  of employees (N_i) for each firm. The model object contains information about the current employment  status (O_h) of each worker.\n\nThe function performs the following steps:\n\nCalculates the vacancies (V_i) for each firm as the difference between desired and current employees.\nIdentifies employed workers and shuffles them randomly.\nFires workers from firms with negative vacancies to adjust the workforce.\nIdentifies unemployed workers and firms with positive vacancies.\nRandomly matches unemployed workers to firms with vacancies until all vacancies are filled or there are no more unemployed workers.\n\nThe function returns:\n\nN_i: An updated array of the number of employed workers for each firm.\nO_h: An updated array where each element represents the firm a worker is employed with (0 if unemployed).\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.perform_firms_market!-NTuple{15, Any}","page":"API","title":"BeforeIT.perform_firms_market!","text":"Perform the firms market exchange process\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.perform_retail_market!-NTuple{30, Any}","page":"API","title":"BeforeIT.perform_retail_market!","text":"Perform the retail market exchange process\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.search_and_matching!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.search_and_matching!","text":"search_and_matching!(model; parallel::Bool = false)\n\nThis function performs a search and matching algorithm for firms and for retail markets. It takes in a model object  and an optional boolean argument for multi-threading. The function loops over all goods and performs the firms market  and retail market operations for each good. Finally, it updates the aggregate variables based on the results of markets.\n\nThis function updates the model in-place and does not return any value.\n\n\n\n\n\n","category":"method"},{"location":"examples/basic_inheritance.html#Extending-BeforeIT-using-macros-and-multiple-dispatch","page":"Extending the model","title":"Extending BeforeIT using macros and multiple dispatch","text":"","category":"section"},{"location":"examples/basic_inheritance.html#Extension-by-Specialization","page":"Extending the model","title":"Extension by Specialization","text":"","category":"section"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"import BeforeIT as Bit\nusing Plots","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"When extending the BeforeIT model it is required to first create a new model type to use instead of the default model, we can do so by using","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.@object struct NewModel(Bit.Model) <: Bit.AbstractModel end","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"In BeforeIT, new objects can be created to add new behaviours. For instance, we can define a new central bank object with one extra attribute","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.@object mutable struct NewCentralBank(Bit.CentralBank) <: Bit.AbstractCentralBank\n    fixed_rate::Float64\nend","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"and then change the default central bank behaviour for the new type","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.central_bank_rate(model::NewModel) = model.cb.fixed_rate","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Now, we can initialize the model to include the new type, to do so, we will need to initialize all model components first","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"p, ic = Bit.AUSTRIA2010Q1.parameters, Bit.AUSTRIA2010Q1.initial_conditions\nfirms = Bit.Firms(p, ic)\nw_act, w_inact = Bit.Workers(p, ic)\ncb = Bit.CentralBank(p, ic)\nbank = Bit.Bank(p, ic)\ngovernment = Bit.Government(p, ic)\nrotw = Bit.RestOfTheWorld(p, ic)\nagg = Bit.Aggregates(p, ic)\nproperties = Bit.Properties(p, ic)\ndata = Bit.Data()","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"And then initialize a new central bank with the same fields as the original one, and the fixed interest rate","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"new_cb = NewCentralBank(Bit.fields(cb)..., 0.02)\n\nstd_model = Bit.Model((w_act, w_inact, firms, bank, cb, government, rotw, agg, properties, data))\nnew_model = NewModel((w_act, w_inact, firms, bank, new_cb, government, rotw, agg, properties, data))","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"After that, we simulate both models","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"T = 20\nmodel_vec_standard = Bit.ensemblerun!((deepcopy(std_model) for _ in 1:4), T);\nmodel_vec_new = Bit.ensemblerun!((deepcopy(new_model) for _ in 1:4), T);\nnothing #hide","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"And plot the results","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"using Plots, StatsPlots\nps = Bit.plot_data_vectors([model_vec_standard, model_vec_new], quantities = [:euribor, :gdp_deflator])\nplot(ps..., layout = (1, 2), size = (600, 300))","category":"page"},{"location":"examples/basic_inheritance.html#Extension-by-Invocation","page":"Extending the model","title":"Extension by Invocation","text":"","category":"section"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"First, we create as before a new model type","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.@object struct NewModel2(Bit.Model) <: Bit.AbstractModel end","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Now, let's say that one wants to track the number of employees in the economy, something not included by default when running a simulation. To do so, we create a new data type with","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.@object mutable struct MoreData(Bit.Data) <: Bit.AbstractData\n    N_employed::Vector{Int} = Int[]\nend","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"We then need to specialize the function Bit.collect_data!, and, at the same time, invoke the default tracking because we don't want to lose the information on the other variables","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"function Bit.collect_data!(m::NewModel2)\n    @invoke Bit.collect_data!(m::Bit.AbstractModel)\n    push!(m.data.N_employed, sum(m.firms.N_i))\n    return m\nend","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"We then initialize the model as usual","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"firms = Bit.Firms(p, ic)\nw_act, w_inact = Bit.Workers(p, ic)\ncb = Bit.CentralBank(p, ic)\nbank = Bit.Bank(p, ic)\ngovernment = Bit.Government(p, ic)\nrotw = Bit.RestOfTheWorld(p, ic)\nagg = Bit.Aggregates(p, ic)\nproperties = Bit.Properties(p, ic)\nmdata = MoreData()\nnew_model = NewModel2((w_act, w_inact, firms, bank, cb, government, rotw, agg, properties, mdata))","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"and run the simulation","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Bit.run!(new_model, T);\nnothing #hide","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"Finally we can plot the new data","category":"page"},{"location":"examples/basic_inheritance.html","page":"Extending the model","title":"Extending the model","text":"plot(new_model.data.N_employed, label = \"Employed Workers\")","category":"page"},{"location":"examples/single_agents.html#Working-with-Single-Agents","page":"Working with Single Agents","title":"Working with Single Agents","text":"","category":"section"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"To support complex extensions of the base model, we implemented a way to retrieve single agents from containers of multiple instances having a SoA (Struct-Of-Arrays) layout under the hood.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"In practice, this allows to operate on agents as if they were single structs. Let's see how this unfolds with a concrete example. As usual, we create a model instance with","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"import BeforeIT as Bit\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\nmodel = Bit.Model(parameters, initial_conditions);\nnothing #hide","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Three containers in this model have multiple instances of agents: model.firms, model.w_act, model.w_inact. Each of them to be compatible with this approach contains IDs which correspond to single instances. IDs are UInt and are set internally.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"note: Note\nOne invariant of IDs one could rely on is that at initialization IDs are mapped one-to-one to indices of the arrays. Though, if any deletion happens this won't be true anymore.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"id = 1\nagent = model.w_act[id]","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Then we can access or modify attributes of the agent simply with","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"agent.Y_h","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"and","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"agent.Y_h = 1.0","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Now, we will show how to add or remove agent instances from the model. Since agents are added by passing a NamedTuple of the fields we will use the fields of the agent we retrieved for ease of exposition","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"agentfields = Bit.getfields(agent)","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"note: Note\nImportantly, fields can be accessed as long as the agent is still inside the model, and not after that. So, if you need those fields for something else after removing an agent, retrieve the fields before removing it.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"delete!(model.w_act, id)\npush!(model.w_act, agentfields);\nnothing #hide","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"We can also retrieve the id of the last agent added to the container with","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"id = Bit.lastid(model.w_act)","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Let's finally verify that the last agent has Y_h equal to 1.0 as it should be","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"agent = model.w_act[id]\nagent.Y_h","category":"page"},{"location":"examples/single_agents.html#A-More-Complex-Example","page":"Working with Single Agents","title":"A More Complex Example","text":"","category":"section"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Let's now use this capability to extend the base model.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"When extending the BeforeIT models it is required to first create a new model type to use instead of the default model, we can do so by using","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Bit.@object struct NewModel(Bit.Model) <: Bit.AbstractModel end","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Let's say that we want to add the posssibilty for workers to sign financial contracts to borrow money. At issuance, the worker’s deposit would increase by principal, and in time step period the money_to_be_paid should be paid by the debtor. In each time step a worker signs a new ConsumerLoanContract with a probability of 30% for a principal which is 20% of its Y_h, which should be repaid by a 10% margin 5 time steps later. A worker can have multiple ConsumerLoanContracts. A worker can only sign a new ConsumerLoanContract if the sum of money_to_be_paid is less than its Y_h.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"To perform this last operation efficiently, we first store the sum of money_to_be_paid as a new field for the workers with","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Bit.@object mutable struct NewWorkers(Bit.Workers) <: Bit.AbstractWorkers\n    sum_money_to_be_paid::Vector{Float64}\nend","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Let’s introduce a new ConsumerLoanContract struct into the model. A worker could sign a ConsumerLoanContract and get a credit which would be repaid.","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"To do so, we first define it with","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"struct ConsumerLoanContract\n    principal::Float64\n    money_to_be_paid::Float64\n    period::Int32\n    debtor::Bit.Agent{NewWorkers}\nend","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"and store a vector of contracts into the properties of the model","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Bit.@object mutable struct NewProperties(Bit.Properties) <: Bit.AbstractProperties\n    contracts::Vector{ConsumerLoanContract}\nend","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"We want that to happen before the search & matching process, to do so we could either specialize the step! function or the function we want to call immediately after this new process. For the matter of brevity, we will follow this second approach:","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"function Bit.search_and_matching_credit!(model::NewModel)\n    sign_and_repay_contracts!(model.w_act, model)\n    return @invoke Bit.search_and_matching_credit!(model::Bit.AbstractModel)\nend\n\nfunction sign_and_repay_contracts!(workers, model)\n    for id in Bit.allids(workers)\n        agent = workers[id]\n        if rand() < 0.3 && agent.sum_money_to_be_paid <= agent.Y_h\n            principal = 0.2 * agent.Y_h\n            agent.Y_h += principal\n            money_to_be_paid = 1.1 * principal\n            period = model.agg.t + 5\n            new_contract = ConsumerLoanContract(principal, money_to_be_paid, period, agent)\n            push!(model.prop.contracts, new_contract)\n            agent.sum_money_to_be_paid += money_to_be_paid\n        end\n    end\n    repaid_contracts_indices = Int[]\n    for (i, contract) in enumerate(model.prop.contracts)\n        if contract.period == model.agg.t\n            debtor = contract.debtor\n            if debtor.Y_h <= contract.money_to_be_paid\n                debtor.Y_h -= contract.money_to_be_paid\n                debtor.sum_money_to_be_paid -= contract.money_to_be_paid\n                push!(repaid_contracts_indices, i)\n            end\n        end\n    end\n    for i in repaid_contracts_indices\n        contracts = model.prop.contracts\n        contracts[i], contracts[end] = contracts[end], contracts[i]\n        pop!(contracts)\n    end\n    return\nend","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Now, we just create the new model","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"p, ic = Bit.AUSTRIA2010Q1.parameters, Bit.AUSTRIA2010Q1.initial_conditions\nfirms = Bit.Firms(p, ic)\nw_act, w_inact = Bit.Workers(p, ic)\ncb = Bit.CentralBank(p, ic)\nbank = Bit.Bank(p, ic)\ngov = Bit.Government(p, ic)\nrotw = Bit.RestOfTheWorld(p, ic)\nagg = Bit.Aggregates(p, ic)\nprop = Bit.Properties(p, ic)\ndata = Bit.Data()\n\nw_act_new = NewWorkers(Bit.fields(w_act)..., zeros(length(w_act.Y_h)))\nprop_new = NewProperties(Bit.fields(prop)..., ConsumerLoanContract[])\n\nmodel = NewModel(w_act_new, w_inact, firms, bank, cb, gov, rotw, agg, prop_new, data)","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"and evolve it","category":"page"},{"location":"examples/single_agents.html","page":"Working with Single Agents","title":"Working with Single Agents","text":"Bit.step!(model)","category":"page"},{"location":"examples/basic_example.html#Essential-use-of-BeforeIT","page":"Basics","title":"Essential use of BeforeIT","text":"","category":"section"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"We start by importing the BeforeIT library and other useful libraries.","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"import BeforeIT as Bit\nusing Plots, StatsPlots","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"We then initialise the model loading some precomputed set of parameters and by specifying a number of epochs. In another tutorial we will illustrate how to compute parameters and initial conditions.","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"parameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"We can now initialise the model","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"model = Bit.Model(parameters, initial_conditions);\nnothing #hide","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Note that the it is very simple to inspect the model by typing","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"fieldnames(typeof(model))","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"and to inspect the specific attributes of one agent type by typing","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"fieldnames(typeof(model.bank))","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"We can run now the model for a number of epochs","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"T = 16\nfor _ in 1:T\n    Bit.step!(model; parallel = true)\n    Bit.collect_data!(model)\nend","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Note that we can equivalently run the model for a number of steps in the single command Bit.run!(model), but writing the loop explicitely is more instructive. We can then plot any time series stored in the data tracker, for example","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"plot(model.data.real_gdp, title = \"gdp\", titlefont = 10)","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Or we can plot multiple time series at once using the function plot_data","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"ps = Bit.plot_data(model, quantities = [:real_gdp, :real_household_consumption, :real_government_consumption, :real_capitalformation, :real_exports, :real_imports, :wages, :euribor, :gdp_deflator])\nplot(ps..., layout = (3, 3))","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"To run multiple Monte-Carlo repetitions in parallel we can use","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"models = (Bit.Model(parameters, initial_conditions) for _ in 1:2)\nmodels = Bit.ensemblerun!(models, T)","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Note that we can equivalently run nsims models for T steps in the single command `Bit.ensemblerun(model, T, nsims)`.","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Note that this will use the number of threads specified when activating the Julia environment. To discover the number of threads available, you can use the command","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"Threads.nthreads()","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"To activate Julia with a specific number of threads, say 8, you can use the command julia -t 8 in the terminal. We can then plot the results of the monte-carlo repetitions using the function plot_data_vector","category":"page"},{"location":"examples/basic_example.html","page":"Basics","title":"Basics","text":"ps = Bit.plot_data_vector(models)\nplot(ps..., layout = (3, 3))","category":"page"},{"location":"examples/prediction_pipeline.html#Full-prediction-pipeline","page":"Calibration","title":"Full prediction pipeline","text":"","category":"section"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"import BeforeIT as Bit\nusing Dates, Plots, StatsPlots","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"We start from loading the calibration object for italy, which contains 4 datasets: calibration_data, figaro, data, and ea. These are saved within BeforeIT.jl for the Italian case, and would need to be appropriately generated for other countries.","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"cal = Bit.ITALY_CALIBRATION\nfieldnames(typeof(cal))","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"These are essentially 4 dictionaries with well defined keys, such as","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"println(keys(cal.calibration))\nprintln(keys(cal.figaro))\nprintln(keys(cal.data))\nprintln(keys(cal.ea))","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"The object also contains two time variables related to the data","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"println(cal.max_calibration_date)\nprintln(cal.estimation_date)","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"We can calibrate the model on a specific quarter as follows","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"calibration_date = DateTime(2014, 03, 31)\nparameters, initial_conditions = Bit.get_params_and_initial_conditions(cal, calibration_date; scale = 0.0001)","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"We run the model for a number of quarters","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"T = 20\nn_sims = 3\nmodel = Bit.Model(parameters, initial_conditions)\nmodel_vector = Bit.ensemblerun!((deepcopy(model) for _ in 1:n_sims), T);\nnothing #hide","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"We obtain predictions from the model simulations","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"real_data = cal.data\npredictions_dict = Bit.get_predictions_from_sims(Bit.DataVector(model_vector), real_data, calibration_date)","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"Finally, we can plot the predictions against the real data","category":"page"},{"location":"examples/prediction_pipeline.html","page":"Calibration","title":"Calibration","text":"p1 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_gdp_quarterly\"; crop = true)\np2 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_household_consumption_quarterly\"; crop = true)\np3 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_fixed_capitalformation_quarterly\"; crop = true)\np4 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_government_consumption_quarterly\"; crop = true)\np5 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_exports_quarterly\"; crop = true)\np6 = Bit.plot_model_vs_real(predictions_dict, real_data, \"real_imports_quarterly\"; crop = true)\n\nplot(p1, p2, p3, p4, p5, p6, layout = (3, 2), legend = false)","category":"page"},{"location":"index.html#Behavioural-agent-based-economic-forecasting-in-Julia","page":"Home","title":"Behavioural agent-based economic forecasting in Julia","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to BeforeIT.jl, a Julia implementation of the agent-based model presented in Economic forecasting with an agent-based model, the first ABM matching the performance of traditional economic forecasting tools.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"With BeforeIT.jl, you can perform economic forecasting and explore different counterfactual scenarios. Thanks to its modular design, the package is also a great starting point for anyone looking to extend its capabilities or integrate it with other tools.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Developed in Julia, a language known for its efficiency, BeforeIT.jl is both fast and user-friendly, making it accessible whether you’re an expert programmer or just starting out.","category":"page"},{"location":"index.html#Julia-installation","page":"Home","title":"Julia installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To run this software, you will need a working Julia installation on your machine. If you don't have it installed already, simply follow the short instructions available here.","category":"page"},{"location":"index.html#BeforeIT.jl-Installation","page":"Home","title":"BeforeIT.jl Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To install BeforeIT.jl, simply open a Julia REPL by writing julia in your terminal, and then execute the following","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"BeforeIT\")","category":"page"},{"location":"index.html#Quick-example","page":"Home","title":"Quick example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To check that the installation worked, try running the model in your terminal with","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"import BeforeIT as Bit\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\n\nT = 20\nmodel = Bit.Model(parameters, initial_conditions)\ndata = Bit.run!(model, T)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To plot the results of the simulation, you can use the Plots package","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Plots\n\nplot(data.real_gdp)","category":"page"},{"location":"index.html#License","page":"Home","title":"License","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"BeforeIT.jl is released under the GNU Affero General Public License v3 or later (AGPLv3+).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Copyright 2024 - Banca d'Italia and the authors.","category":"page"},{"location":"index.html#Main-developers-and-maintainers","page":"Home","title":"Main developers and maintainers","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Aldo Glielmo <aldo.glielmo@bancaditalia.it>\nMitja Devetak <m888itja@gmail.com>\nAdriano Meligrana <adrianomeligrana@proton.me>","category":"page"},{"location":"index.html#Other-collaborators-and-contributors","page":"Home","title":"Other collaborators and contributors","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Sebastian Poledna <poledna@iiasa.ac.at>\nMarco Benedetti\nClaudia Biancotti\nSara Corbo for the logo design\nAndrea Gentili for suggesting the name of the pakege\nArnau Quera-Bofarull for help in the deployment of the documentation\nSteven Hoekstra for fixing a bug in a script\nPeter Reschenhofer for fixing a bug in a script","category":"page"},{"location":"index.html#Citing-*BeforeIT*","page":"Home","title":"Citing BeforeIT","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A software description of the package is available here. If you found BeforeIT useful for your research, please cite it","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"@article{glielmo2025beforeit,\n  title={BeforeIT. jl: High-Performance Agent-Based Macroeconomics Made Easy},\n  author={Glielmo, Aldo and Devetak, Mitja and Meligrana, Adriano and Poledna, Sebastian},\n  journal={arXiv preprint arXiv:2502.13267},\n  year={2025}\n}","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"and do not hesitate to get in touch to include your extension in the next release of the package and software description.","category":"page"},{"location":"index.html#Disclaimer","page":"Home","title":"Disclaimer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package is an outcome of a research project. All errors are those of the authors. All views expressed are personal views, not those of Bank of Italy.","category":"page"},{"location":"index.html#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>The documentation of BeforeIT.jl was built using these direct dependencies,</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/BeforeIT/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/BeforeIT/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"},{"location":"examples/multithreading_speedup.html#Multithreading-speedup-for-large-models","page":"Multithreading within the model","title":"Multithreading speedup for large models","text":"","category":"section"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"In this tutorial we illustrate how to make use of multi-threading in BeforeIT.jl to allow for faster executions of single simulation runs.","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"import BeforeIT as Bit\nusing Plots, StatsPlots","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"First, we initialise the model, this time we use the Italy 2010Q1 scenario","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"parameters = Bit.ITALY2010Q1.parameters\ninitial_conditions = Bit.ITALY2010Q1.initial_conditions\nmodel = Bit.Model(parameters, initial_conditions);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"The model is in scale 1:2000, so it has around 30,000 households","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"model.prop.H","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Note that the households number is actually the sum of active and inactive households, the owners of firms and of the bank","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"length(model.w_act) + length(model.w_inact) + length(model.firms) + 1","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Let's fist check how many threads we have available in this Julia session","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Threads.nthreads()","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Then we need to first compile the code not to count compilation time, we can do that just by executing the function one time","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"T = 50\nBit.run!(model, T; parallel = false);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Let's now compare the performance of single-threading and multi-threading","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"model = Bit.Model(parameters, initial_conditions);\n@time Bit.run!(model, T; parallel = false);\n\nmodel = Bit.Model(parameters, initial_conditions);\n@time Bit.run!(model, T; parallel = true);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Is the speedup in line to what we would expect? Yes!","category":"page"}]
}
