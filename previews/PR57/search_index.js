var documenterSearchIndex = {"docs":
[{"location":"examples/scenario_analysis_via_shock.html#Scenario-analysis-via-custom-shocks","page":"Shocked simulations","title":"Scenario analysis via custom shocks","text":"","category":"section"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"In this tutorial we will illustrate how to perform a scenario analysis by running the model multiple times under a specific shock and comparing the results with the unshocked model.","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"import BeforeIT as Bit\nimport StatsBase: mean, std\nusing Plots\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Initialise the model and the data collector","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"T = 16\nmodel = Bit.init_model(parameters, initial_conditions, T);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Simulate the baseline model for T quarters, N_reps times, and collect the data","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"N_reps = 64\ndata_vec_baseline = Bit.ensemblerun(model, N_reps)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Now, apply a shock to the model and simulate it again. A shock is simply a function that takes the model and changes some of its parameters for a specific time period. We do this by first defining a \"struct\" with useful attributes. For example, we can define an productivity and a consumption shock with the following structs","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"struct ProductivityShock\n    productivity_multiplier::Float64    # productivity multiplier\nend\n\nstruct ConsumptionShock\n    consumption_multiplier::Float64    # productivity multiplier\n    final_time::Int\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"and then by making the structs callable functions that change the parameters of the model, this is done in Julia using the syntax below","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"A permanent change in the labour productivities by the factor s.productivity_multiplier","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"function (s::ProductivityShock)(model::Bit.Model)\n    model.firms.alpha_bar_i .= model.firms.alpha_bar_i .* s.productivity_multiplier\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"A temporary change in the propensity to consume model.prop.psi by the factor s.consumption_multiplier","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"function (s::ConsumptionShock)(model::Bit.Model)\n    if model.agg.t == 1\n        model.prop.psi = model.prop.psi * s.consumption_multiplier\n    elseif model.agg.t == s.final_time\n        model.prop.psi = model.prop.psi / s.consumption_multiplier\n    end\nend","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Define specific shocks, for example a 2% increase in productivity","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"productivity_shock = ProductivityShock(1.02)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"or a 4 quarters long 2% increase in consumption","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"consumption_shock = ConsumptionShock(1.02, 4)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Simulate the model with the shock","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"data_vec_shocked = Bit.ensemblerun(model, N_reps; shock = consumption_shock)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Compute mean and standard error of GDP for the baseline and shocked simulations","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"mean_gdp_baseline = mean(data_vec_baseline.real_gdp, dims = 2)\nmean_gdp_shocked = mean(data_vec_shocked.real_gdp, dims = 2)\nsem_gdp_baseline = std(data_vec_baseline.real_gdp, dims = 2) / sqrt(N_reps)\nsem_gdp_shocked = std(data_vec_shocked.real_gdp, dims = 2) / sqrt(N_reps)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Compute the ratio of shocked to baseline GDP","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"gdp_ratio = mean_gdp_shocked ./ mean_gdp_baseline","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"the standard error on a ratio of two variables is computed with the error propagation formula","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"sem_gdp_ratio = gdp_ratio .* ((sem_gdp_baseline ./ mean_gdp_baseline).^2 .+ (sem_gdp_shocked ./ mean_gdp_shocked).^2).^0.5","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"Finally, we can plot the impulse response curve","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"plot(\n    1:T+1,\n    gdp_ratio,\n    ribbon = sem_gdp_ratio,\n    fillalpha = 0.2,\n    label = \"\",\n    xlabel = \"quarters\",\n    ylabel = \"GDP change\",\n)","category":"page"},{"location":"examples/scenario_analysis_via_shock.html","page":"Shocked simulations","title":"Shocked simulations","text":"We can save the figure using: savefig(\"gdp_shock.png\")","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#Code-reference","page":"API","title":"Code reference","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"In this page we document the functions which constitute the bulk of BeforeIT.jl functionality.","category":"page"},{"location":"api.html#Agent-types","page":"API","title":"Agent types","text":"","category":"section"},{"location":"api.html#BeforeIT.Aggregates","page":"API","title":"BeforeIT.Aggregates","text":"This is a Aggregates type. It is used to store the aggregate variables of the economy. Note that t is an integer, while the rest are floats or vectors of floats.\n\nFields\n\nY [vector]: GDP data + predictions\npi_ [vector]: inflation data + predictions\nP_bar: Global price index\nP_bar_g [vector]: Producer price index for principal good g\nP_bar_HH: Consumer price index\nP_bar_CF: Capital price index\nP_bar_h: CPI_h\nP_bar_CF_h: Capital price index _h\nY_e: Expected GDP\ngamma_e: Expected growth\npi_e: Expected inflation\nt: Time index\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Bank","page":"API","title":"BeforeIT.Bank","text":"This is a Bank type. It represents the bank of the model.\n\nFields\n\nE_k: equity capital (common equity) of the bank\nPi_k: Profits of the bank\nPi_e_k: Expected profits of the bank\nD_k: Residual and balancing item on the bank’s balance sheet\nr: Rate for loans and morgages\n\nHousehold fields (bank' owner)\n\nY_h: Net disposable income of bank owner (investor)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\nK_h: Capital stock\nD_h: Deposits\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.CentralBank","page":"API","title":"BeforeIT.CentralBank","text":"This is a CentralBank type. It represents the central bank of the model.\n\nFields\n\nr_bar: Nominal interest rate\nr_G: Interest rate on government bonds\nrho: Parameter for gradual adjustment of the policy rate\nr_star: Real equilibrium interest rate\npi_star: Inflation target by CB\nxi_pi: Weight the CB puts on inflation targeting\nxi_gamma: Weight placed on economic\nE_CB: Central bank equity\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Firms","page":"API","title":"BeforeIT.Firms","text":"This is a Firms type. Each field is an array which stores the values for all the firms in the economy. Note that the G_i, N_i and V_i fields are integers, while the rest are floats.\n\nFor all fields the entry at index i corresponds to the ith firm.\n\nFields\n\nG_i: Principal product\nalpha_bar_i: Average productivity of labor\nbeta_i: Productivity of intermediate consumption\nkappa_i: Productivity of capital\nw_i: Wages\nw_bar_i: Average wage rate\ndelta_i: Depreciation rate for capital\ntau_Y_i: Net tax rate on products\ntau_K_i: Net tax rate on production\nN_i: Number of persons employed\nY_i: Production of goods\nQ_i: Sales of goods\nQ_d_i: Demand for goods\nP_i: Price\nS_i: Inventories\nK_i: Capital, in real terms\nM_i: Intermediate goods/services and raw materials, in real terms\nL_i: Outstanding loans\npi_bar_i: Operating margin\nD_i: Deposits of the firm\nPi_i: Profits\nV_i: Vacancies\nI_i: Investments\nE_i: Equity\nP_bar_i: Price index\nP_CF_i: Price index\nDS_i: Differnece in stock of final goods\nDM_i: Difference in stock of intermediate goods\nDL_i: Obtained loans\nDL_d_i: Target loans\nK_e_i: Expected capital \nL_e_i: Expected loans\nQ_s_i: Expected sales\nI_d_i: Desired investments\nDM_d_i: Desired materials\nN_d_i: Desired employment\nPi_e_i: Expected profits\n\nHousehold fields (firms' owners)\n\nY_h: Net disposable income of firm owner (investor)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\nK_h: Capital stock\nD_h: Deposits of the owner of the firms\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Government","page":"API","title":"BeforeIT.Government","text":"This is a Government type. It represents the government of the model.\n\nFields\n\nalpha_G: Autoregressive coefficient for government consumption\nbeta_G: Scalar constant for government consumption\nsigma_G: Variance coefficient for government consumption\nY_G: Government revenues\nC_G: Consumption demand of the general government\nL_G: Loans taken out by the government\nsb_inact: Social benefits for inactive persons\nsb_other: Social benefits for all\nC_d_j [vector]: Local governments consumption demand\nC_j: Realised government consumption\nP_j: Price inflation of government goods <- ??\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Model","page":"API","title":"BeforeIT.Model","text":"This is a Model type. It is used to store all the agents of the economy.\n\nFields\n\nw_act: Workers that are active\nw_inact: Workers that are inactive\nfirms: Firms\nbank: Bank\ncb: CentralBank\ngov: Government\nrotw: RestOfTheWorld\nagg: Aggregates\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.RestOfTheWorld","page":"API","title":"BeforeIT.RestOfTheWorld","text":"This is a RestOfTheWorld type. It represents the rest of the world of the model.\n\nFields\n\nalpha_E: Autoregressive coefficient for exports\nbeta_E: Scalar constant for exports\nsigma_E: Variance coefficient for exports\nalpha_I: Autoregressive coefficient for imports\nbeta_I: Scalar constant for imports\nsigma_I: Variance coefficient for imports\nY_EA: GDP euro area\ngamma_EA: Growth euro area\npi_EA: Inflation euro area\nalpha_pi_EA: Autoregressive coefficient for euro area inflation\nbeta_pi_EA: Autoregressive coefficient for euro area inflation Scalar constant for euro area inflation\nsigma_pi_EA: Variance coefficient for euro area inflation\nalpha_Y_EA: Autoregressive coefficient for euro area GDP\nbeta_Y_EA: Autoregressive coefficient for euro area GDP Scalar constant for euro area GDP\nsigma_Y_EA: Variance coefficient for euro area GDP\nD_RoW: Net creditor/debtor position of the national economy to the rest of the world\nY_I: Supply of imports (in real terms)\nC_E: Total demand for exports\nC_d_l [vector]: Demand for exports of specific product\nC_l: Realised consumption by foreign consumers\nY_m [vector]: Supply of imports per sector\nQ_m [vector]: Sales for imports per sector\nQ_d_m [vector]: Demand for goods\nP_m [vector]: Price of imports per sector\nP_l: Price inflation of exports <- ??\n\n\n\n\n\n","category":"type"},{"location":"api.html#BeforeIT.Workers","page":"API","title":"BeforeIT.Workers","text":"This is a Workers. Each field is an array which stores the values for all the workers in the economy. Note that the O_h field is an integer, while the rest are floats.\n\nFor all fields the entry at index i corresponds to the ith worker.\n\nFields\n\nY_h: Net disposable income of worker owner (investor)\nD_h: Deposits\nK_h: Capital stock\nw_h: Wages (0 if inactive or unemployed)\nO_h: Occupation (0 if unemployed, -1 if inactive)\nC_d_h: Consumption budget\nI_d_h: Investment budget\nC_h: Realised consumption\nI_h: Realised investment\n\n\n\n\n\n","category":"type"},{"location":"api.html#Initialisation-function","page":"API","title":"Initialisation function","text":"","category":"section"},{"location":"api.html#BeforeIT.init_model","page":"API","title":"BeforeIT.init_model","text":"init_model(parameters, initial_conditions, T, typeInt = Int64, typeFloat = Float64)\n\nInitializes the model with given parameters and initial conditions.\n\nParameters:\n\nparameters: A dictionary containing the model parameters.\ninitial_conditions: A dictionary containing the initial conditions.\nT (integer): The time horizon of the model.\ntypeInt: (optional, default: Int64): The data type to be used for integer values.\ntypeFloat: (optional, default: Float64): The data type to be used for floating-point values.\n\nReturns:\n\nmodel::AbstractModel: The initialized model.\n\n\n\n\n\n","category":"function"},{"location":"api.html#BeforeIT.update_variables_with_totals!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.update_variables_with_totals!","text":"update_variables_with_totals!(model::AbstractModel)\n\nUpdate the variables in the given model with some global quantities obtained from all agents. This is the last step in the initialization process and it must be performed after all agents have been initialized.\n\nArguments\n\nmodel::AbstractModel: The model object to update.\n\nReturns\n\nNothing\n\n\n\n\n\n","category":"method"},{"location":"api.html#Functions-to-run-an-entire-simulation","page":"API","title":"Functions to run an entire simulation","text":"","category":"section"},{"location":"api.html#CommonSolve.step!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"CommonSolve.step!","text":"step!(model; multi_threading = false)\n\nThis function simulates a single epoch the economic model, updating various components of the model based  the interactions between different economic agents. It accepts a model object, which encapsulates the state for the simulation, and an optional boolean parameter multi_threading to enable or disable multi-threading.\n\nKey operations performed include:\n\nFinancial adjustments for firms and banks, including insolvency checks and profit calculations.\nEconomic expectations and adjustments, such as growth, inflation, and central bank rates.\nLabor and credit market operations, including wage updates and loan processing.\nHousehold economic activities, including consumption and investment budgeting.\nGovernment and international trade financial activities, including budgeting and trade balances.\nGeneral market matching and accounting updates to reflect changes in economic indicators and positions.\n\nThe function updates the model in-place and does not return any value.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.ensemblerun-Tuple{BeforeIT.AbstractModel, Any}","page":"API","title":"BeforeIT.ensemblerun","text":"ensemblerun(model, n_sims; shock = NoShock(), multi_threading = true)\n\nA function that runs n_sims simulations in parallel with multiple threading and returns a vector of  data objects of dimension n_sims.\n\nArguments\n\nmodel: The model configuration used to simulate.\nn_sims: The number of simulations to run in parallel.\n\nReturns\n\ndata_vector: A vector containing the data objects collected during each simulation.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.run!-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.run!","text":"run!(model; shock = NoShock())\n\nRun a single simulation based on the provided model.  The simulation runs for a number of epochs specified by model.prop.T.\n\nArguments\n\nmodel::AbstractModel: The model configuration used for the simulation.\n\nReturns\n\ndata::Data: The data collected during the simulation.\n\nDetails\n\nThe function initializes the data using Bit.init_data(model), then iteratively updates the model and data for each epoch using Bit.step!(model) and Bit.update_data!(data, model) respectively.\n\nExample\n\n```julia model = Bit.initmodel(parameters, initialconditions, T) data = run!(model)\n\n\n\n\n\n","category":"method"},{"location":"api.html#Firms-actions","page":"API","title":"Firms actions","text":"","category":"section"},{"location":"api.html#BeforeIT.firms_deposits-Tuple{Any, Any}","page":"API","title":"BeforeIT.firms_deposits","text":"firms_deposits(firms, model)\n\nCalculate the new deposits of firms.\n\nArguments\n\nfirms: Firms object\nmodel: Model object\n\nReturns\n\nDD_i: Vector of new deposits\n\nThe new deposits DD_i are calculated as follows:\n\nDD_i = sales + labour_cost + material_cost + taxes_products + taxes_production + corporate_tax + dividend_payments + interest_payments + interest_received + investment_cost + new_credit + debt_installment\n\nwhere:\n\nsales = P_i * Q_i\nlabour_cost = (1 + tau_SIF) * w_i * N_i * P_bar_HH\nmaterial_cost = -DM_i * P_bar_i\ntaxes_products = -tau_Y_i * P_i * Y_i\ntaxes_production = -tau_K_i * P_i * Y_i\ncorporate_tax = -tau_FIRM * pos(Pi_i)\ndividend_payments = -theta_DIV * (1 - tau_FIRM) * pos(Pi_i)\ninterest_payments = -r * (L_i + pos(-D_i))\ninterest_received = r_bar * pos(D_i)\ninvestment_cost = -P_CF_i * I_i\nnew_credit = DL_i\ndebt_installment = -theta * L_i\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_equity-Tuple{Any, Any}","page":"API","title":"BeforeIT.firms_equity","text":"firms_equity(firms, model)\n\nCalculate the equity of firms.\n\nArguments\n\nfirms: Firms object\nmodel: Model object\n\nReturns\n\nE_i: Vector of equity\n\nThe equity E_i is calculated as follows:\n\nE_i = D_i + M_i * sum(a_sg G_i * barP_g) + P_i * S_i + barP_CF * K_i - L_i\n\nwhere:\n\nD_i: Deposits\nM_i: Intermediate goods\na_sg: Technology coefficient of the gth product in the sth industry\nG_i: Vector of goods\nP_bar_g: Producer price index for principal good g\nP_i: Price\nS_i: Stock\nP_bar_CF: Capital price index\nK_i: Capital stock\nL_i: Loans\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_expectations_and_decisions-Tuple{Any, Any}","page":"API","title":"BeforeIT.firms_expectations_and_decisions","text":"firms_expectations_and_decisions(firms, model)\n\nCalculate the expectations and decisions of firms. That is: compute firm quantity, price, investment and intermediate-goods,  employment decisions, expected profits, and desired/expected loans and capital.\n\nArguments\n\nfirms: Firms object\nmodel: Model object\n\nReturns\n\nQ_s_i: Vector of desired quantities\nI_d_i: Vector of desired investments\nDM_d_i: Vector of desired intermediate goods\nN_d_i: Vector of desired employment\nPi_e_i: Vector of expected profits\nDL_d_i: Vector of desired new loans\nK_e_i: Vector of expected capital\nL_e_i: Vector of expected loans\nP_i: Vector of  prices\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_loans-Tuple{Any, Any}","page":"API","title":"BeforeIT.firms_loans","text":"firms_loans(firms, model)\n\nCalculate the new loans of firms.\n\nArguments\n\nfirms: Firms object\nmodel: Model object\n\nReturns\n\nL_i: Vector of new loans\n\nThe new loans L_i are calculated as follows:\n\nL_i = (1 - theta) * L_i + DL_i\n\nwhere:\n\ntheta: Rate of repayment\nL_i: Loans\nDL_i: Acquired new loans\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_production-Tuple{AbstractFirms}","page":"API","title":"BeforeIT.firms_production","text":"firms_production(firms)\n\nCalculate the production of firms.\n\nArguments\n\nfirms: Firms object\n\nReturns\n\nY_i: Vector of production\n\nThe production Y_i is computed using a Leontief technology.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_profits-Tuple{AbstractFirms, BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.firms_profits","text":"firms_profits(firms, model)\n\nCalculate the profits of firms.\n\nArguments\n\nfirms: Firms object\nmodel: Model object\n\nReturns\n\nPi_i: Vector of profits\n\nThe profits Pi_i are calculated as follows:\n\nPi_i = in_sales + in_deposits - out_wages - out_expenses - out_depreciation - out_taxes_prods - out_taxes_capital - out_loans\n\nwhere:\n\nin_sales = P_i * Q_i + P_i * DS_i\nin_deposits = r_bar * pos(D_i)\nout_wages = (1 + tau_SIF) * w_i * N_i * P_bar_HH\nout_expenses = 1 / beta_i * P_bar_i * Y_i\nout_depreciation = delta_i / kappa_i * P_CF_i * Y_i\nout_taxes_prods = tau_Y_i * P_i * Y_i\nout_taxes_capital = tau_K_i * P_i * Y_i\nout_loans = r * (L_i + pos(-D_i))\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_stocks-Tuple{Any}","page":"API","title":"BeforeIT.firms_stocks","text":"firms_stocks(firms)\n\nCalculate the stocks of firms.\n\nArguments\n\nfirms: Firms object\n\nReturns\n\nK_i: Vector of capital stock\nM_i: Vector of intermediate goods\nDS_i: Vector of differneces in stock of final goods\nS_i: Vector of stock of final goods\n\nThe stocks are calculated as follows:\n\nK_i = K_i - delta_i / kappa_i * Y_i + I_i\nM_i = M_i - Y_i / beta_i + DM_i\nDS_i = Y_i - Q_i\nS_i = S_i + DS_i\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.firms_wages-Tuple{AbstractFirms}","page":"API","title":"BeforeIT.firms_wages","text":"firms_wages(firms)\n\nCalculate the wages set by firms.\n\nArguments\n\nfirms: Firms object\n\nReturns\n\nw_i: Vector of wages\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.init_firms-Tuple{Any, Any}","page":"API","title":"BeforeIT.init_firms","text":"init_firms(parameters, initial_conditions; typeInt = Int64, typeFloat = Float64)\n\nInitialize firms with given parameters and initial conditions.\n\nArguments\n\nparameters: The parameters for initializing the firms.\ninitial_conditions: The initial conditions for the firms.\ntypeInt: (optional) The integer type to be used. Default is Int64.\ntypeFloat: (optional) The floating-point type to be used. Default is Float64.\n\nReturns\n\nfirms::Firms: The initialized firms.\nfirms_args::Tuple: The arguments used to initialize the firms.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.leontief_production-NTuple{7, Any}","page":"API","title":"BeforeIT.leontief_production","text":"leontief_production(Q_s_i, N_i, alpha_i, K_i, kappa_i, M_i, beta_i)\n\nCalculate the production function of firms.\n\nArguments\n\nQ_s_i: Vector of desired quantities\nN_i: Vector of employment\nalpha_i: Vector of labour productivity\nK_i: Vector of capital stock\nkappa_i: Vector of capital productivity\nM_i: Vector of intermediate goods\nbeta_i: Vector of intermediate goods productivity\n\nReturns\n\nY_i: Vector of production\n\nThe Leontief production function Y_i is calculated as follows:\n\nY_i = min(Q_s_i min(N_i cdot alpha_i min(K_i cdot kappa_i M_i cdot beta_i)))\n\n\n\n\n\n","category":"method"},{"location":"api.html#Households-actions","page":"API","title":"Households actions","text":"","category":"section"},{"location":"api.html#Government-actions","page":"API","title":"Government actions","text":"","category":"section"},{"location":"api.html#BeforeIT.gov_expenditure-Tuple{Any, Any}","page":"API","title":"BeforeIT.gov_expenditure","text":"gov_expenditure(gov::AbstractGovernment, model)\n\nComputes government expenditure on consumption and transfers to households.\n\nArguments\n\ngov: government object\nmodel: model object\n\nReturns\n\nC_G: government consumption\nC_d_j: local government consumptions\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_loans-Tuple{Any, Any}","page":"API","title":"BeforeIT.gov_loans","text":"gov_loans(gov::AbstractGovernment, model, Y_G)\n\nComputes government new government debt.\n\nArguments\n\ngov::AbstractGovernment: government object\nmodel: model object\n\nReturns\n\nL_G: new government debt\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_revenues-Tuple{BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.gov_revenues","text":"gov_revenues(model)\n\nComputes government revenues from taxes and social security contributions. The government collects taxes on labour income, capital income, value added, and corporate income. It also collects social security contributions from workers and firms. The government also collects taxes on consumption and capital formation. Finally, the government collects taxes on exports and imports.\n\nArguments\n\nmodel: model object\n\nReturns\n\nY_G: government revenues\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.gov_social_benefits-Tuple{AbstractGovernment, Any}","page":"API","title":"BeforeIT.gov_social_benefits","text":"gov_social_benefits(gov::AbstractGovernment, model)\n\nComputes social benefits paid by the government households.\n\nArguments\n\ngov: government object\nmodel: model object\n\nReturns\n\nsb_other: social benefits for other households\nsb_inact: social benefits for inactive households\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.init_government-Tuple{Any, Any}","page":"API","title":"BeforeIT.init_government","text":"init_government(parameters, initial_conditions; typeInt = Int64, typeFloat = Float64)\n\nInitialize the government agent.\n\nArguments\n\nparameters: The parameters.\ninitial_conditions: The initial conditions.\ntypeInt: The integer type to be used (default: Int64).\ntypeFloat: The floating-point type to be used (default: Float64).\n\nReturns\n\nThe initialized government model.\nThe arguments used to initialize the government model.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Bank-and-Central-Bank-actions","page":"API","title":"Bank and Central Bank actions","text":"","category":"section"},{"location":"api.html#BeforeIT._bank_deposits-NTuple{7, Any}","page":"API","title":"BeforeIT._bank_deposits","text":"_deposit_bank(waD_h, wiD_h, fD_h, bD_h, fD_i, bE_k, fL_i)\n\nHelper function to calculate the new deposits of a bank.\n\nArguments\n\nwaD_h: Array of deposits from active workers\nwiD_h: Array of deposits from inactive workers\nfD_h: Array of deposits from firms\nbD_h: Deposits from the bank owner\nfD_i: Array of deposits from firms\nbE_k: Bank equity\nfL_i: Array of loans to firms\n\nReturns\n\nD_k: New deposits of the bank\n\nThe new deposits D_k are calculated as the sum of the deposits of the active workers, the inactive workers, the firms, and the bank owner itself, plus the bank's equity, minus the loans of the firms.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT._bank_profits-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}, T, T, T}} where T","page":"API","title":"BeforeIT._bank_profits","text":"_bank_profits(L_i, D_i, D_h, D_k, r_bar, r)\n\nHelper function to calculate the total profits of a bank.\n\nArguments\n\nL_i: Array of loans provided by the bank\nD_i: Array of deposits from firms\nD_h: Array of deposits from households\nD_k: Residual and balancing item on the bank’s balance sheet\nr_bar: Base interest rate\nr: Interest rate set by the bank\n\nReturns\n\nPi_k: Total profits of the bank\n\nThe total profits Pi_k are calculated as follows:\n\nPi_k = r cdot sum_i(L_i + max(0 -D_i)) + r cdot sum_h(max(0 -D_h)) + r_bar \ncdot max(0 D_k) - r_bar cdot sum_i(max(0 D_i)) - r_bar cdot \nsum_h(max(0 D_h)) - r_bar cdot max(0 -D_k)\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT._central_bank_profits-NTuple{4, Any}","page":"API","title":"BeforeIT._central_bank_profits","text":"_central_bank_profits(r_bar, D_k, L_G, r_G)\n\nHelper function to calculate the profits of a central bank.\n\nArguments\n\nr_bar: The base interest rate\nD_k: Deposits from commercial banks\nL_G: Loans provided to the government\nr_G: Interest rate on government loans\n\nReturns\n\nPi_CB: Profits of the central bank\n\nThe profits Pi_CB are calculated as follows:\n\nPi_CB = r_G cdot L_G - r_bar cdot D_k\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_deposits-Tuple{Any, Any}","page":"API","title":"BeforeIT.bank_deposits","text":"deposits_bank(bank, w_act, w_inact, firms)\n\nCalculate the new deposits of a bank.\n\nArguments\n\nbank: The Bank object containing the bank of the model\nw_act: The Workers object containing the active workers of the model\nw_inact: The Workers object containing the inactive workers of the model\nfirms: The Firms object containing the firms of the model\n\nReturns\n\nD_k: New deposits of the bank\n\nThe new deposits D_k are calculated as the sum of the deposits of the active workers, the inactive workers, the firms, and the bank owner itself, plus the bank's equity, minus the loans of the firms.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_equity-Tuple{Any, Any}","page":"API","title":"BeforeIT.bank_equity","text":"bank_equity(bank, model)\n\nCalculate the net profits of a bank.\n\nArguments\n\nbank: The bank object.\nmodel: The model object.\n\nReturns\n\nE_k: The updated equity of the bank.\n\nThe net profits DE_k are calculated as:\n\nDE_k = Pi_k - theta_DIV cdot (1 - tau_FIRM) cdot max(0 Pi_k) - tau_FIRM cdot max(0 Pi_k)\n\nand the equity E_k is updated as:\n\nE_k = E_k + DE_k\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_expected_profits-Tuple{Any, Any}","page":"API","title":"BeforeIT.bank_expected_profits","text":"bank_expected_profits(Pi_k, pi_e, gamma_e)\n\nCalculate the expected profits of a bank.\n\nArguments\n\nPi_k: Past profits of the bank\npi_e: Expected inflation rate\ngamma_e: Expected growth rate\n\nReturns\n\nE_Pi_k: Expected profits of the bank\n\nThe expected profits E_Pi_k are calculated as follows:\n\nE_Pi_k = Pi_k cdot (1 + pi_e) cdot (1 + gamma_e)\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_profits-Tuple{Any, Any}","page":"API","title":"BeforeIT.bank_profits","text":"bank_profits(bank, model)\n\nCalculate the total profits of a bank.\n\nArguments\n\nbank: The bank object.\nmodel: The model object.\n\nReturns\n\nPi_k: The total profits of the bank.\n\nThe total profits Pi_k are calculated as:\n\nPi_k = r cdot sum_i(L_i + max(0 -D_i)) + r cdot sum_h(max(0 -D_h)) + r_bar\ncdot max(0 D_k) - r_bar cdot sum_i(max(0 D_i)) - r_bar cdot\nsum_h(max(0 D_h)) - r_bar cdot max(0 -D_k)\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.bank_rate-Tuple{Any, Any}","page":"API","title":"BeforeIT.bank_rate","text":"bank_rate(bank, model)\n\nUpdate the interest rate set by the bank.\n\nArguments\n\nbank: The bank whose interest rate is to be updated\nmodel: Model object\n\nReturns\n\nr: The updated interest rate\n\nr = barr + mu\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.central_bank_equity-Tuple{Any, Any}","page":"API","title":"BeforeIT.central_bank_equity","text":"central_bank_equity(cb, model)\n\nCalculate the equity of the central bank.\n\nArguments\n\ncb: The central bank\nmodel: The model object\n\nReturns\n\nE_CB: The equity of the central bank\n\nThe equity E_CB is calculated as follows:\n\nE_CB = E_CB + Pi_CB\n\nwhere \\Pi_{CB} are the profits of the central bank.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.central_bank_rate-Tuple{AbstractCentralBank, BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.central_bank_rate","text":"central_bank_rate(cb, model)\n\nUpdate the base interest rate set by the central bank according to the Taylor rule.\n\nArguments\n\ncb: The central bank whose base interest rate is to be updated\nmodel: The model object\n\nReturns\n\nr_bar: The updated base interest rate\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.finance_insolvent_firms!-Tuple{AbstractFirms, AbstractBank, Any}","page":"API","title":"BeforeIT.finance_insolvent_firms!","text":"finance_insolvent_firms!(firms, bank, P_bar_CF, zeta_b,  insolvent)\n\nRifinance insolvent firms using bank equity.\n\nArguments\n\nfirms: The Firms object containing the firms of the model\nbank: The Bank object containing the bank of the model\nP_bar_CF: Capital price index\nzeta_b: Parameter of loan-to-capital ratio for new firms after bankruptcy\n\nReturns\n\nThis function does not return a value. It modifies the banks and firms collections in-place.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.taylor_rule-Union{Tuple{T}, NTuple{8, T}} where T","page":"API","title":"BeforeIT.taylor_rule","text":"taylor_rule(rho, r_bar, r_star, pi_star, xi_pi, xi_gamma, gamma_EA, pi_EA)\n\nCalculate the interest rate according to the Taylor rule.\n\nArguments\n\nrho: Parameter for gradual adjustment of the policy rate.\nr_bar: Nominal interest rate.\nr_star: Real equilibrium interest rate.\npi_star: The target inflation rate.\nxi_pi: Weight the CB puts on inflation targeting.\nxi_gamma: Weight placed on economic growth.\ngamma_EA: The output growth rate.\npi_EA: The inflation rate.\n\nReturns\n\nrate: The calculated interest rate.\n\nThe Taylor rule is given by the following equation:\n\nr_t = ρ * r_t-1 + (1 - ρ) * (r^* + π^* + ξ_π * (π_t - π^*) + ξ_γ * γ_t)\n\n\n\n\n\n","category":"method"},{"location":"api.html#Rest-Of-The-World-actions","page":"API","title":"Rest Of The World actions","text":"","category":"section"},{"location":"api.html#BeforeIT.rotw_deposits-Tuple{Any, Any}","page":"API","title":"BeforeIT.rotw_deposits","text":"rotw_deposits(rotw, tau_EXPORT)\n\nCalculate the deposits of the rest of the world.\n\nArguments\n\nrotw: The rest of the world object.\ntau_EXPORT: The export tax.\n\nReturns\n\nD_RoW: The deposits of the rest of the world.\n\nThe deposits D_RoW are calculated as follows:\n\nD_RoW = D_RoW + left( sum_m P_m cdot Q_m right) - (1 + tau_EXPORT) cdot C_l\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.rotw_import_export-Tuple{Any, Any}","page":"API","title":"BeforeIT.rotw_import_export","text":"rotw_import_export(rotw, model, pi_e, epsilon_E, epsilon_I)\n\nCalculate the demand for exports and supply of imports of the rest of the world.\n\nArguments\n\nrotw: The rest of the world object.\nmodel: The model object.\n\nReturns\n\nC_E: Total demand for exports.\nY_I: Supply of imports (in real terms).\nC_d_l: TDemand for exports of specific product.\nY_m: Supply of imports per sector.\nP_m: Price of imports per sector.\n\n\n\n\n\n","category":"method"},{"location":"api.html#Markets","page":"API","title":"Markets","text":"","category":"section"},{"location":"api.html#BeforeIT.search_and_matching_credit-Tuple{AbstractFirms, BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.search_and_matching_credit","text":"search_and_matching_credit(firms::Firms, model)\n\nThis function calculates the credit allocation for each firm in the given firms object.\n\nParameters:\n\nfirms::Firms: The firms object.\nmodel: The model object.\n\nReturns:\n\nDL_i: An array of credit allocations for each firm.\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.search_and_matching_labour-Tuple{AbstractFirms, BeforeIT.AbstractModel}","page":"API","title":"BeforeIT.search_and_matching_labour","text":"search_and_matching_labour(firms::Firms, model)\n\nThis function implements a labor search and matching algorithm. It takes in a Firms object and a Model object as  input. The Firms object contains information about the number of desired employees (N_d_i) and the current number  of employees (N_i) for each firm. The model object contains information about the current employment  status (O_h) of each worker.\n\nThe function performs the following steps:\n\nCalculates the vacancies (V_i) for each firm as the difference between desired and current employees.\nIdentifies employed workers and shuffles them randomly.\nFires workers from firms with negative vacancies to adjust the workforce.\nIdentifies unemployed workers and firms with positive vacancies.\nRandomly matches unemployed workers to firms with vacancies until all vacancies are filled or there are no more unemployed workers.\n\nThe function returns:\n\nN_i: An updated array of the number of employed workers for each firm.\nO_h: An updated array where each element represents the firm a worker is employed with (0 if unemployed).\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.perform_firms_market!-NTuple{15, Any}","page":"API","title":"BeforeIT.perform_firms_market!","text":"Perform the firms market exchange process\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.perform_retail_market!-NTuple{31, Any}","page":"API","title":"BeforeIT.perform_retail_market!","text":"Perform the retail market exchange process\n\n\n\n\n\n","category":"method"},{"location":"api.html#BeforeIT.search_and_matching!","page":"API","title":"BeforeIT.search_and_matching!","text":"search_and_matching!(model, multi_threading::Bool = false)\n\nThis function performs a search and matching algorithm for firms and for retail markets. It takes in a model object  and an optional boolean argument for multi-threading. The function loops over all goods and performs the firms market  and retail market operations for each good. Finally, it updates the aggregate variables based on the results of markets.\n\nArgs:\n\nmodel: The model object\nmulti_threading: A boolean indicating whether to use multi-threading for the algorithm. Default is false.\n\nThis function updates the model in-place and does not return any value.\n\n\n\n\n\n","category":"function"},{"location":"examples/basic_inheritance.html#Essential-extension-of-BeforeIT-using-macros-and-mltiple-dispatch","page":"Essential model extension","title":"Essential extension of BeforeIT using macros and mltiple dispatch","text":"","category":"section"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"import BeforeIT as Bit\nusing Plots","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"define a new central bank object with one extra attribute","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"mutable struct NewCentralBank <: Bit.AbstractCentralBank\n    Bit.@centralBank\n    fixed_rate::Float64\nend","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"change the default central bank behaviour for the new type","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"function Bit.central_bank_rate(cb::NewCentralBank, model::Bit.AbstractModel)\n    return cb.fixed_rate\nend\n\np, ic = Bit.AUSTRIA2010Q1.parameters, Bit.AUSTRIA2010Q1.initial_conditions\nT = 20","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"initialise all agent types using the corresponding functions","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"properties = Bit.init_properties(p, T)\nfirms, _ = Bit.init_firms(p, ic)\nw_act, w_inact, V_i_new, _, _ = Bit.init_workers(p, ic, firms)\nfirms.V_i = V_i_new\nbank, _ = Bit.init_bank(p, ic, firms)\ngovernment, _ = Bit.init_government(p, ic)\nrotw, _ = Bit.init_rotw(p, ic)\nagg, _ = Bit.init_aggregates(p, ic, T)","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"initialise the custom central bank","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"standard_central_bank, args = Bit.init_central_bank(p, ic)\nnewcentral_bank = NewCentralBank(args..., 0.02)","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"initialise a new model using the new central bank as well as a standard model","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"standard_model = Bit.Model(w_act, w_inact, firms, bank, standard_central_bank,\ngovernment, rotw, agg, properties)\n\nnew_model = Bit.Model(w_act, w_inact, firms, bank, newcentral_bank,\ngovernment, rotw, agg, properties)","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"adjust accounting aften initialisation","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"Bit.update_variables_with_totals!(standard_model)\nBit.update_variables_with_totals!(new_model)","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"run a simulation with the new model","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"data_vec_standard = Bit.ensemblerun(standard_model, 4);\ndata_vec_new = Bit.ensemblerun(new_model, 4);\nnothing #hide","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"plot the results","category":"page"},{"location":"examples/basic_inheritance.html","page":"Essential model extension","title":"Essential model extension","text":"ps = Bit.plot_data_vectors([data_vec_standard, data_vec_new], quantities = [:euribor, :gdp_deflator])\nplot(ps..., layout = (1, 2), size = (600, 300))","category":"page"},{"location":"examples/basic_example.html#Essential-use-of-BeforeIT","page":"Essentials","title":"Essential use of BeforeIT","text":"","category":"section"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We start by importing the BeforeIT library and other useful libraries.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"import BeforeIT as Bit\n\nusing Plots","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We then initialise the model loading some precomputed set of parameters and by specifying a number of epochs. In another tutorial we will illustrate how to compute parameters and initial conditions.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"parameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can now initialise the model, by specifying in advance the maximum number of epochs.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"T = 16\nmodel = Bit.init_model(parameters, initial_conditions, T)","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Note that the it is very simple to inspect the model by typing","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"fieldnames(typeof(model))","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"and to inspect the specific attributes of one agent type by typing","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"fieldnames(typeof(model.bank))","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can now define a data tracker, which will store the time series of the model.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"data = Bit.init_data(model);\nnothing #hide","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can run now the model for a number of epochs and progressively update the data tracker.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"for t in 1:T\n    Bit.step!(model; multi_threading = true)\n    Bit.update_data!(data, model)\nend","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Note that we can equivalently run the model for a number of epochs in the single command data = Bit.run!(model), but writing the loop explicitely is more instructive.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can then plot any time series stored in the data tracker, for example","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"plot(data.real_gdp, title = \"gdp\", titlefont = 10)","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Or we can plot multiple time series at once using the function plot_data","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"ps = Bit.plot_data(data, quantities = [:real_gdp, :real_household_consumption, :real_government_consumption, :real_capitalformation, :real_exports, :real_imports, :wages, :euribor, :gdp_deflator])\nplot(ps..., layout = (3, 3))","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"To run multiple monte-carlo repetitions in parallel we can use","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"model = Bit.init_model(parameters, initial_conditions, T)\ndata_vector = Bit.ensemblerun(model, 4)","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Note that this will use the number of threads specified when activating the Julia environment. To discover the number of threads available, you can use the command","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"Threads.nthreads()","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"To activate Julia with a specific number of threads, say 8, you can use the command julia -t 8 in the terminal.","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"We can then plot the results of the monte-carlo repetitions using the function plot_data_vector","category":"page"},{"location":"examples/basic_example.html","page":"Essentials","title":"Essentials","text":"ps = Bit.plot_data_vector(data_vector)\nplot(ps..., layout = (3, 3))","category":"page"},{"location":"examples/change_expectations.html#Changing-expectations-via-function-overloading","page":"Experimentations (advanced)","title":"Changing expectations via function overloading","text":"","category":"section"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"In this tutorial we will illustrate how to experiment with different expectations of the agents in the model.","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"import BeforeIT as Bit\n\nusing Random, Plots","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Import standard parameters and initial conditions","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"par = Bit.AUSTRIA2010Q1.parameters\ninit = Bit.AUSTRIA2010Q1.initial_conditions","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Set the seed, initialise the model and run one simulation","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Random.seed!(1234)\nT = 40\nmodel = Bit.init_model(par, init, T)\ndata = Bit.run!(model)","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Now we can experiment with changing expectations of the agents in the model. We will change the function estimate_next_value to make the agents expect the last value of the time series (so to represent backward looking expectations)","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"function Bit.estimate_next_value(data)\n    return data[end]\nend","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Run the model again, with the same seed","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Random.seed!(1234)\nmodel = Bit.init_model(par, init, T)\ndata_back = Bit.run!(model)","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Plot the results, comparing the two cases as different lines","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"p1 = plot(data.real_gdp, title = \"gdp\", titlefont = 10, label = \"forward looking\")\nplot!(p1, data_back.real_gdp, titlefont = 10, label = \"backward looking\")\n\np2 = plot(data.real_household_consumption, title = \"consumption\", titlefont = 10)\nplot!(p2, data_back.real_household_consumption, titlefont = 10, label = \"backward looking\")\n\nplot(p1, p2, layout = (2, 1), legend = true)","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Plot all time series","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"p1 = plot(data.real_gdp, title = \"gdp\", titlefont = 10)\nplot!(p1, data_back.real_gdp, titlefont = 10)\np2 = plot(data.real_household_consumption, title = \"household cons.\", titlefont = 10)\nplot!(p2, data_back.real_household_consumption, titlefont = 10)\np3 = plot(data.real_government_consumption, title = \"gov. cons.\", titlefont = 10)\nplot!(p3, data_back.real_government_consumption, titlefont = 10)\np4 = plot(data.real_capitalformation, title = \"capital form.\", titlefont = 10)\nplot!(p4, data_back.real_capitalformation, titlefont = 10)\np5 = plot(data.real_exports, title = \"exports\", titlefont = 10)\nplot!(p5, data_back.real_exports, titlefont = 10)\np6 = plot(data.real_imports, title = \"imports\", titlefont = 10)\nplot!(p6, data_back.real_imports, titlefont = 10)\np7 = plot(data.wages, title = \"wages\", titlefont = 10)\nplot!(p7, data_back.wages, titlefont = 10)\np8 = plot(data.euribor, title = \"euribor\", titlefont = 10)\nplot!(p8, data_back.euribor, titlefont = 10)\np9 = plot(data.nominal_gdp ./ data.real_gdp, title = \"gdp deflator\", titlefont = 10)\nplot!(p9, data_back.nominal_gdp ./ data_back.real_gdp, titlefont = 10)\n\nplot(p1, p2, p3, p4, p5, p6, p7, p8, p9, layout = (3, 3), legend = false)","category":"page"},{"location":"examples/change_expectations.html","page":"Experimentations (advanced)","title":"Experimentations (advanced)","text":"Note that, importantly, once the function estimate_next_value has been changed, the model will use the new expectations in all the simulations, unless the function is changed again. To restore the original expectations you could close the Julia session.","category":"page"},{"location":"examples/scenario_analysis_via_overload.html#Scenario-analysis-via-function-overloading","page":"Shocked simulations (advanced)","title":"Scenario analysis via function overloading","text":"","category":"section"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"In this tutorial we will illustrate how to perform a scenario analysis by running the model multiple times under a specific shock and comparing the results with the unshocked model.","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"import BeforeIT as Bit\n\nusing Plots, StatsPlots\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Initialise the model and the data collector","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"T = 20\nmodel = Bit.init_model(parameters, initial_conditions, T);\ndata = Bit.init_data(model);\nnothing #hide","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Simulate the model for T quarters","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"data_vec_baseline = Bit.ensemblerun(model, 4)","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Now, apply a shock to the model and simulate it again Here, we do this by overloading the centralbankrate function with the wanted behaviour","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"function Bit.central_bank_rate(cb::Bit.CentralBank, model::Bit.Model)\n    gamma_EA = model.rotw.gamma_EA\n    pi_EA = model.rotw.pi_EA\n    taylor_rate = Bit.taylor_rule(cb.rho, cb.r_bar, cb.r_star, cb.pi_star, cb.xi_pi, cb.xi_gamma, gamma_EA, pi_EA)\n    if model.agg.t < 10\n        return 0.01\n    else\n        return taylor_rate\n    end\nend\n\ndata_vec_shocked = Bit.ensemblerun(model, 4)","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Finally, we can plot baseline and shocked simulations","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Te = T + 1\nStatsPlots.errorline(\n    1:Te,\n    data_vec_baseline.real_gdp,\n    errortype = :sem,\n    label = \"baseline\",\n    titlefont = 10,\n    xlabel = \"quarters\",\n    ylabel = \"GDP\",\n)\nStatsPlots.errorline!(\n    1:Te,\n    data_vec_shocked.real_gdp,\n    errortype = :sem,\n    label = \"shock\",\n    titlefont = 10,\n    xlabel = \"quarters\",\n    ylabel = \"GDP\",\n)","category":"page"},{"location":"examples/scenario_analysis_via_overload.html","page":"Shocked simulations (advanced)","title":"Shocked simulations (advanced)","text":"Note that, importantly, once the function central_bank_rate has been changed, the model will use the new interest rate in all the simulations, unless the function is changed again. To restore the original interest rate, you could close and restart the Julia session.","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"In this tutorial we illustrate how to calibrate the model to the Italian data for a specific quarter","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"import BeforeIT as Bit\n\nusing Dates, FileIO","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"We start from loading the calibration object for italy, which contains 4 datasets: calibration_data, figaro, data, and ea. These are saved within BeforeIT.jl for the Italian case, and would need to be appropriately generated for other countries.","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"cal = Bit.ITALY_CALIBRATION\nfieldnames(typeof(cal))","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"These are essentially 4 dictionaries with well defined keys, such as","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"println(keys(cal.calibration))\nprintln(keys(cal.figaro))\nprintln(keys(cal.data))\nprintln(keys(cal.ea))","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"The object also contains two time variables related to the data","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"println(cal.max_calibration_date)\nprintln(cal.estimation_date)","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"We can calibrate the model on a specific quarter as follows","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"calibration_date = DateTime(2010, 03, 31)\nparameters, initial_conditions = Bit.get_params_and_initial_conditions(cal, calibration_date; scale = 0.01)","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"In general, we might want to repeat this operation for multiple quarters. In the following, we loop over all quarters from 2010Q1 to 2019Q4 and save the parameters and initial conditions in separate files. We can then load these files later to run the model for each quarter.","category":"page"},{"location":"examples/get_parameters_and_initial_conditions.html","page":"Calibration","title":"Calibration","text":"start_calibration_date = DateTime(2010, 03, 31)\nend_calibration_date = DateTime(2019, 12, 31)\n\nfor calibration_date in collect(start_calibration_date:Dates.Month(3):end_calibration_date)\n    params, init_conds = Bit.get_params_and_initial_conditions(cal, calibration_date; scale = 0.0005)\n    save(\n        \"data/italy/parameters/\" *\n        string(year(calibration_date)) *\n        \"Q\" *\n        string(Dates.quarterofyear(calibration_date)) *\n        \".jld2\",\n        params,\n    )\n    save(\n        \"data/italy/initial_conditions/\" *\n        string(year(calibration_date)) *\n        \"Q\" *\n        string(Dates.quarterofyear(calibration_date)) *\n        \".jld2\",\n        init_conds,\n    )\nend","category":"page"},{"location":"index.html#Behavioural-agent-based-economic-forecasting-in-Julia","page":"Home","title":"Behavioural agent-based economic forecasting in Julia","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to BeforeIT.jl, a Julia implementation of the agent-based model presented in Economic forecasting with an agent-based model, the first ABM matching the performance of traditional economic forecasting tools.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"With BeforeIT.jl, you can perform economic forecasting and explore different counterfactual scenarios. Thanks to its modular design, the package is also a great starting point for anyone looking to extend its capabilities or integrate it with other tools.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Developed in Julia, a language known for its efficiency, BeforeIT.jl is both fast and user-friendly, making it accessible whether you’re an expert programmer or just starting out.","category":"page"},{"location":"index.html#Julia-installation","page":"Home","title":"Julia installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To run this software, you will need a working Julia installation on your machine. If you don't have it installed already, simply follow the short instructions available here.","category":"page"},{"location":"index.html#BeforeIT.jl-Installation","page":"Home","title":"BeforeIT.jl Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To install BeforeIT.jl, simply open a Julia REPL by writing julia in your terminal, and then execute the following","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"BeforeIT\")","category":"page"},{"location":"index.html#Quick-example","page":"Home","title":"Quick example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To check that the installation worked, try running the model in your terminal with","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"import BeforeIT as Bit\n\nparameters = Bit.AUSTRIA2010Q1.parameters\ninitial_conditions = Bit.AUSTRIA2010Q1.initial_conditions\n\nT = 20\nmodel = Bit.initialise_model(parameters, initial_conditions, T)\ndata = Bit.run!(model)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To plot the results of the simulation, you can use the Plots package","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Plots\n\nplot(data.real_gdp)","category":"page"},{"location":"index.html#License","page":"Home","title":"License","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"BeforeIT.jl is released under the GNU Affero General Public License v3 or later (AGPLv3+).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Copyright 2024 - Banca d'Italia and the authors.","category":"page"},{"location":"index.html#Main-developers-and-maintainers","page":"Home","title":"Main developers and maintainers","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Aldo Glielmo <aldo.glielmo@bancaditalia.it>\nMitja Devetak <m888itja@gmail.com>\nAdriano Meligrana <adrianomeligrana@proton.me>","category":"page"},{"location":"index.html#Other-collaborators-and-contributors","page":"Home","title":"Other collaborators and contributors","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Sebastian Poledna <poledna@iiasa.ac.at>\nMarco Benedetti\nClaudia Biancotti\nSara Corbo for the logo design\nAndrea Gentili for suggesting the name of the pakege\nArnau Quera-Bofarull for help in the deployment of the documentation\nSteven Hoekstra for fixing a bug in a script\nPeter Reschenhofer for fixing a bug in a script","category":"page"},{"location":"index.html#Citing-*BeforeIT*","page":"Home","title":"Citing BeforeIT","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A software description of the package is available here. If you found BeforeIT useful for your research, please cite it","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"@article{glielmo2025beforeit,\n  title={BeforeIT. jl: High-Performance Agent-Based Macroeconomics Made Easy},\n  author={Glielmo, Aldo and Devetak, Mitja and Meligrana, Adriano and Poledna, Sebastian},\n  journal={arXiv preprint arXiv:2502.13267},\n  year={2025}\n}","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"and do not hesitate to get in touch to include your extension in the next release of the package and software description.","category":"page"},{"location":"index.html#Disclaimer","page":"Home","title":"Disclaimer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package is an outcome of a research project. All errors are those of the authors. All views expressed are personal views, not those of Bank of Italy.","category":"page"},{"location":"index.html#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>The documentation of BeforeIT.jl was built using these direct dependencies,</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/BeforeIT/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/BeforeIT/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"},{"location":"examples/multithreading_speedup.html#Multithreading-speedup-for-large-models","page":"Multithreading within the model","title":"Multithreading speedup for large models","text":"","category":"section"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"In this tutorial we illustrate how to make use of multi threading in BeforeIT.jl to allow for faster executions of single simulation runs.","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"import BeforeIT as Bit\n\nusing FileIO, Plots, StatsPlots","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"First, we initialise the model, this time we use the Italy 2010Q1 scenario, and we want to simulate the model for a large number of epochs","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"parameters = Bit.ITALY2010Q1.parameters\ninitial_conditions = Bit.ITALY2010Q1.initial_conditions\nT = 50\nmodel = Bit.init_model(parameters, initial_conditions, T);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"The model is in scale 1:2000, so it has around 30,000 households","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"model.prop.H","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Note that the households number is actually the sum of active and inactive households, the owners of firms and of the bank","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"length(model.w_act) + length(model.w_inact) + length(model.firms) + 1","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Let's fist check how many threads we have available in this Julia session","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Threads.nthreads()","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Then we need to first compile the code not to count compilation time, we can do that just by executing the function one time","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Bit.run!(model; multi_threading = false);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Let's now compare the performance of single threading and multi threading","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"model = Bit.init_model(parameters, initial_conditions, T);\n@time data = Bit.run!(model; multi_threading = false);\n\nmodel = Bit.init_model(parameters, initial_conditions, T);\n@time data = Bit.run!(model; multi_threading = true);\nnothing #hide","category":"page"},{"location":"examples/multithreading_speedup.html","page":"Multithreading within the model","title":"Multithreading within the model","text":"Is the speedup in line to what we would expect? Yes!","category":"page"}]
}
